/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CharacterManagerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// dnd-data.ts
var DND_DATA = {
  classes: {
    "Artificer": {
      hitDie: 8,
      primaryAbility: ["Intelligence"],
      savingThrows: ["Constitution", "Intelligence"],
      subclasses: ["Alchemist", "Armorer", "Artillerist", "Battle Smith"],
      spellcaster: true,
      spellcastingAbility: "Intelligence",
      spellSlots: {
        1: [2],
        2: [2],
        3: [3],
        4: [3],
        5: [4, 2],
        6: [4, 2],
        7: [4, 3],
        8: [4, 3],
        9: [4, 3, 2],
        10: [4, 3, 2],
        11: [4, 3, 3],
        12: [4, 3, 3],
        13: [4, 3, 3, 1],
        14: [4, 3, 3, 1],
        15: [4, 3, 3, 2],
        16: [4, 3, 3, 2],
        17: [4, 3, 3, 3, 1],
        18: [4, 3, 3, 3, 1],
        19: [4, 3, 3, 3, 2],
        20: [4, 3, 3, 3, 2]
      }
    },
    "Barbarian": {
      hitDie: 12,
      primaryAbility: ["Strength"],
      savingThrows: ["Strength", "Constitution"],
      subclasses: ["Path of the Berserker", "Path of the Totem Warrior", "Path of the Ancestral Guardian", "Path of the Storm Herald", "Path of the Zealot"],
      spellcaster: false
    },
    "Bard": {
      hitDie: 8,
      primaryAbility: ["Charisma"],
      savingThrows: ["Dexterity", "Charisma"],
      subclasses: ["College of Lore", "College of Valor", "College of Glamour", "College of Swords", "College of Whispers"],
      spellcaster: true,
      spellcastingAbility: "Charisma",
      spellSlots: {
        1: [2],
        2: [3],
        3: [4, 2],
        4: [4, 3],
        5: [4, 3, 2],
        6: [4, 3, 3],
        7: [4, 3, 3, 1],
        8: [4, 3, 3, 2],
        9: [4, 3, 3, 3, 1],
        10: [4, 3, 3, 3, 2],
        11: [4, 3, 3, 3, 2, 1],
        12: [4, 3, 3, 3, 2, 1],
        13: [4, 3, 3, 3, 2, 1, 1],
        14: [4, 3, 3, 3, 2, 1, 1],
        15: [4, 3, 3, 3, 2, 1, 1, 1],
        16: [4, 3, 3, 3, 2, 1, 1, 1],
        17: [4, 3, 3, 3, 2, 1, 1, 1, 1],
        18: [4, 3, 3, 3, 3, 1, 1, 1, 1],
        19: [4, 3, 3, 3, 3, 2, 1, 1, 1],
        20: [4, 3, 3, 3, 3, 2, 2, 1, 1]
      }
    },
    "Cleric": {
      hitDie: 8,
      primaryAbility: ["Wisdom"],
      savingThrows: ["Wisdom", "Charisma"],
      subclasses: ["Life Domain", "Light Domain", "Nature Domain", "Tempest Domain", "Trickery Domain", "War Domain", "Death Domain", "Forge Domain", "Grave Domain"],
      spellcaster: true,
      spellcastingAbility: "Wisdom",
      spellSlots: {
        1: [2],
        2: [3],
        3: [4, 2],
        4: [4, 3],
        5: [4, 3, 2],
        6: [4, 3, 3],
        7: [4, 3, 3, 1],
        8: [4, 3, 3, 2],
        9: [4, 3, 3, 3, 1],
        10: [4, 3, 3, 3, 2],
        11: [4, 3, 3, 3, 2, 1],
        12: [4, 3, 3, 3, 2, 1],
        13: [4, 3, 3, 3, 2, 1, 1],
        14: [4, 3, 3, 3, 2, 1, 1],
        15: [4, 3, 3, 3, 2, 1, 1, 1],
        16: [4, 3, 3, 3, 2, 1, 1, 1],
        17: [4, 3, 3, 3, 2, 1, 1, 1, 1],
        18: [4, 3, 3, 3, 3, 1, 1, 1, 1],
        19: [4, 3, 3, 3, 3, 2, 1, 1, 1],
        20: [4, 3, 3, 3, 3, 2, 2, 1, 1]
      }
    },
    "Druid": {
      hitDie: 8,
      primaryAbility: ["Wisdom"],
      savingThrows: ["Intelligence", "Wisdom"],
      subclasses: ["Circle of the Land", "Circle of the Moon", "Circle of Dreams", "Circle of the Shepherd"],
      spellcaster: true,
      spellcastingAbility: "Wisdom",
      spellSlots: {
        1: [2],
        2: [3],
        3: [4, 2],
        4: [4, 3],
        5: [4, 3, 2],
        6: [4, 3, 3],
        7: [4, 3, 3, 1],
        8: [4, 3, 3, 2],
        9: [4, 3, 3, 3, 1],
        10: [4, 3, 3, 3, 2],
        11: [4, 3, 3, 3, 2, 1],
        12: [4, 3, 3, 3, 2, 1],
        13: [4, 3, 3, 3, 2, 1, 1],
        14: [4, 3, 3, 3, 2, 1, 1],
        15: [4, 3, 3, 3, 2, 1, 1, 1],
        16: [4, 3, 3, 3, 2, 1, 1, 1],
        17: [4, 3, 3, 3, 2, 1, 1, 1, 1],
        18: [4, 3, 3, 3, 3, 1, 1, 1, 1],
        19: [4, 3, 3, 3, 3, 2, 1, 1, 1],
        20: [4, 3, 3, 3, 3, 2, 2, 1, 1]
      }
    },
    "Fighter": {
      hitDie: 10,
      primaryAbility: ["Strength", "Dexterity"],
      savingThrows: ["Strength", "Constitution"],
      subclasses: ["Champion", "Battle Master", "Eldritch Knight", "Arcane Archer", "Cavalier", "Samurai"],
      spellcaster: false
    },
    "Monk": {
      hitDie: 8,
      primaryAbility: ["Dexterity", "Wisdom"],
      savingThrows: ["Strength", "Dexterity"],
      subclasses: ["Way of the Open Hand", "Way of Shadow", "Way of the Four Elements", "Way of the Drunken Master", "Way of the Kensei", "Way of the Sun Soul"],
      spellcaster: false
    },
    "Paladin": {
      hitDie: 10,
      primaryAbility: ["Strength", "Charisma"],
      savingThrows: ["Wisdom", "Charisma"],
      subclasses: ["Oath of Devotion", "Oath of the Ancients", "Oath of Vengeance", "Oath of Conquest", "Oath of Redemption", "Oathbreaker"],
      spellcaster: true,
      spellcastingAbility: "Charisma",
      spellSlots: {
        2: [2],
        3: [3],
        4: [3],
        5: [4, 2],
        6: [4, 2],
        7: [4, 3],
        8: [4, 3],
        9: [4, 3, 2],
        10: [4, 3, 2],
        11: [4, 3, 3],
        12: [4, 3, 3],
        13: [4, 3, 3, 1],
        14: [4, 3, 3, 1],
        15: [4, 3, 3, 2],
        16: [4, 3, 3, 2],
        17: [4, 3, 3, 3, 1],
        18: [4, 3, 3, 3, 1],
        19: [4, 3, 3, 3, 2],
        20: [4, 3, 3, 3, 2]
      }
    },
    "Ranger": {
      hitDie: 10,
      primaryAbility: ["Dexterity", "Wisdom"],
      savingThrows: ["Strength", "Dexterity"],
      subclasses: ["Beast Master", "Hunter", "Gloom Stalker", "Horizon Walker", "Monster Slayer"],
      spellcaster: true,
      spellcastingAbility: "Wisdom",
      spellSlots: {
        2: [2],
        3: [3],
        4: [3],
        5: [4, 2],
        6: [4, 2],
        7: [4, 3],
        8: [4, 3],
        9: [4, 3, 2],
        10: [4, 3, 2],
        11: [4, 3, 3],
        12: [4, 3, 3],
        13: [4, 3, 3, 1],
        14: [4, 3, 3, 1],
        15: [4, 3, 3, 2],
        16: [4, 3, 3, 2],
        17: [4, 3, 3, 3, 1],
        18: [4, 3, 3, 3, 1],
        19: [4, 3, 3, 3, 2],
        20: [4, 3, 3, 3, 2]
      }
    },
    "Rogue": {
      hitDie: 8,
      primaryAbility: ["Dexterity"],
      savingThrows: ["Dexterity", "Intelligence"],
      subclasses: ["Thief", "Assassin", "Arcane Trickster", "Inquisitive", "Mastermind", "Scout", "Swashbuckler"],
      spellcaster: false
    },
    "Sorcerer": {
      hitDie: 6,
      primaryAbility: ["Charisma"],
      savingThrows: ["Constitution", "Charisma"],
      subclasses: ["Draconic Bloodline", "Wild Magic", "Divine Soul", "Shadow Magic", "Storm Sorcery"],
      spellcaster: true,
      spellcastingAbility: "Charisma",
      spellSlots: {
        1: [2],
        2: [3],
        3: [4, 2],
        4: [4, 3],
        5: [4, 3, 2],
        6: [4, 3, 3],
        7: [4, 3, 3, 1],
        8: [4, 3, 3, 2],
        9: [4, 3, 3, 3, 1],
        10: [4, 3, 3, 3, 2],
        11: [4, 3, 3, 3, 2, 1],
        12: [4, 3, 3, 3, 2, 1],
        13: [4, 3, 3, 3, 2, 1, 1],
        14: [4, 3, 3, 3, 2, 1, 1],
        15: [4, 3, 3, 3, 2, 1, 1, 1],
        16: [4, 3, 3, 3, 2, 1, 1, 1],
        17: [4, 3, 3, 3, 2, 1, 1, 1, 1],
        18: [4, 3, 3, 3, 3, 1, 1, 1, 1],
        19: [4, 3, 3, 3, 3, 2, 1, 1, 1],
        20: [4, 3, 3, 3, 3, 2, 2, 1, 1]
      }
    },
    "Warlock": {
      hitDie: 8,
      primaryAbility: ["Charisma"],
      savingThrows: ["Wisdom", "Charisma"],
      subclasses: ["The Archfey", "The Fiend", "The Great Old One", "The Celestial", "The Hexblade"],
      spellcaster: true,
      spellcastingAbility: "Charisma",
      spellSlots: {
        1: [1],
        2: [2],
        3: [2],
        4: [2],
        5: [2],
        6: [2],
        7: [2],
        8: [2],
        9: [2],
        10: [2],
        11: [3],
        12: [3],
        13: [3],
        14: [3],
        15: [3],
        16: [3],
        17: [4],
        18: [4],
        19: [4],
        20: [4]
      }
    },
    "Wizard": {
      hitDie: 6,
      primaryAbility: ["Intelligence"],
      savingThrows: ["Intelligence", "Wisdom"],
      subclasses: ["School of Abjuration", "School of Conjuration", "School of Divination", "School of Enchantment", "School of Evocation", "School of Illusion", "School of Necromancy", "School of Transmutation", "War Magic", "Bladesinging"],
      spellcaster: true,
      spellcastingAbility: "Intelligence",
      spellSlots: {
        1: [2],
        2: [3],
        3: [4, 2],
        4: [4, 3],
        5: [4, 3, 2],
        6: [4, 3, 3],
        7: [4, 3, 3, 1],
        8: [4, 3, 3, 2],
        9: [4, 3, 3, 3, 1],
        10: [4, 3, 3, 3, 2],
        11: [4, 3, 3, 3, 2, 1],
        12: [4, 3, 3, 3, 2, 1],
        13: [4, 3, 3, 3, 2, 1, 1],
        14: [4, 3, 3, 3, 2, 1, 1],
        15: [4, 3, 3, 3, 2, 1, 1, 1],
        16: [4, 3, 3, 3, 2, 1, 1, 1],
        17: [4, 3, 3, 3, 2, 1, 1, 1, 1],
        18: [4, 3, 3, 3, 3, 1, 1, 1, 1],
        19: [4, 3, 3, 3, 3, 2, 1, 1, 1],
        20: [4, 3, 3, 3, 3, 2, 2, 1, 1]
      }
    }
  },
  races: {
    "Dragonborn": {
      subraces: ["Black", "Blue", "Brass", "Bronze", "Copper", "Gold", "Green", "Red", "Silver", "White"],
      abilityScoreIncrease: { strength: 2, charisma: 1 },
      size: "Medium",
      speed: 30
    },
    "Dwarf": {
      subraces: ["Hill Dwarf", "Mountain Dwarf", "Duergar"],
      abilityScoreIncrease: { constitution: 2 },
      size: "Medium",
      speed: 25
    },
    "Elf": {
      subraces: ["High Elf", "Wood Elf", "Dark Elf (Drow)"],
      abilityScoreIncrease: { dexterity: 2 },
      size: "Medium",
      speed: 30
    },
    "Gnome": {
      subraces: ["Forest Gnome", "Rock Gnome", "Deep Gnome"],
      abilityScoreIncrease: { intelligence: 2 },
      size: "Small",
      speed: 25
    },
    "Half-Elf": {
      subraces: [],
      abilityScoreIncrease: { charisma: 2 },
      size: "Medium",
      speed: 30
    },
    "Half-Orc": {
      subraces: [],
      abilityScoreIncrease: { strength: 2, constitution: 1 },
      size: "Medium",
      speed: 30
    },
    "Halfling": {
      subraces: ["Lightfoot", "Stout"],
      abilityScoreIncrease: { dexterity: 2 },
      size: "Small",
      speed: 25
    },
    "Human": {
      subraces: ["Variant Human"],
      abilityScoreIncrease: {},
      size: "Medium",
      speed: 30
    },
    "Tiefling": {
      subraces: [],
      abilityScoreIncrease: { intelligence: 1, charisma: 2 },
      size: "Medium",
      speed: 30
    }
  },
  backgrounds: [
    "Acolyte",
    "Criminal",
    "Folk Hero",
    "Noble",
    "Sage",
    "Soldier",
    "Charlatan",
    "Entertainer",
    "Guild Artisan",
    "Hermit",
    "Outlander",
    "Sailor",
    "Urchin",
    "Anthropologist",
    "Archaeologist",
    "City Watch",
    "Clan Crafter",
    "Cloistered Scholar",
    "Courtier",
    "Faction Agent",
    "Far Traveler",
    "Haunted One",
    "Inheritor",
    "Investigator",
    "Knight of the Order",
    "Mercenary Veteran",
    "Urban Bounty Hunter"
  ],
  alignments: [
    "Lawful Good",
    "Neutral Good",
    "Chaotic Good",
    "Lawful Neutral",
    "True Neutral",
    "Chaotic Neutral",
    "Lawful Evil",
    "Neutral Evil",
    "Chaotic Evil"
  ],
  equipment: {
    weapons: {
      "Club": { damage: "1d4", damageType: "bludgeoning", cost: "1 sp", weight: 2, properties: ["Light"] },
      "Dagger": { damage: "1d4", damageType: "piercing", cost: "2 gp", weight: 1, properties: ["Finesse", "Light", "Thrown"] },
      "Dart": { damage: "1d4", damageType: "piercing", cost: "5 cp", weight: 0.25, properties: ["Finesse", "Thrown"] },
      "Javelin": { damage: "1d6", damageType: "piercing", cost: "5 sp", weight: 2, properties: ["Thrown"] },
      "Mace": { damage: "1d6", damageType: "bludgeoning", cost: "5 gp", weight: 4, properties: [] },
      "Quarterstaff": { damage: "1d6", damageType: "bludgeoning", cost: "2 sp", weight: 4, properties: ["Versatile"] },
      "Sickle": { damage: "1d4", damageType: "slashing", cost: "1 gp", weight: 2, properties: ["Light"] },
      "Spear": { damage: "1d6", damageType: "piercing", cost: "1 gp", weight: 3, properties: ["Thrown", "Versatile"] },
      "Crossbow, light": { damage: "1d8", damageType: "piercing", cost: "25 gp", weight: 5, properties: ["Ammunition", "Loading", "Two-handed"] },
      "Shortbow": { damage: "1d6", damageType: "piercing", cost: "25 gp", weight: 2, properties: ["Ammunition", "Two-handed"] },
      "Sling": { damage: "1d4", damageType: "bludgeoning", cost: "1 sp", weight: 0, properties: ["Ammunition"] },
      "Battleaxe": { damage: "1d8", damageType: "slashing", cost: "10 gp", weight: 4, properties: ["Versatile"] },
      "Flail": { damage: "1d8", damageType: "bludgeoning", cost: "10 gp", weight: 2, properties: [] },
      "Glaive": { damage: "1d10", damageType: "slashing", cost: "20 gp", weight: 6, properties: ["Heavy", "Reach", "Two-handed"] },
      "Greataxe": { damage: "1d12", damageType: "slashing", cost: "30 gp", weight: 7, properties: ["Heavy", "Two-handed"] },
      "Greatsword": { damage: "2d6", damageType: "slashing", cost: "50 gp", weight: 6, properties: ["Heavy", "Two-handed"] },
      "Halberd": { damage: "1d10", damageType: "slashing", cost: "20 gp", weight: 6, properties: ["Heavy", "Reach", "Two-handed"] },
      "Lance": { damage: "1d12", damageType: "piercing", cost: "10 gp", weight: 6, properties: ["Reach", "Special"] },
      "Longsword": { damage: "1d8", damageType: "slashing", cost: "15 gp", weight: 3, properties: ["Versatile"] },
      "Maul": { damage: "2d6", damageType: "bludgeoning", cost: "10 gp", weight: 10, properties: ["Heavy", "Two-handed"] },
      "Morningstar": { damage: "1d8", damageType: "piercing", cost: "15 gp", weight: 4, properties: [] },
      "Pike": { damage: "1d10", damageType: "piercing", cost: "5 gp", weight: 18, properties: ["Heavy", "Reach", "Two-handed"] },
      "Rapier": { damage: "1d8", damageType: "piercing", cost: "25 gp", weight: 2, properties: ["Finesse"] },
      "Scimitar": { damage: "1d6", damageType: "slashing", cost: "25 gp", weight: 3, properties: ["Finesse", "Light"] },
      "Shortsword": { damage: "1d6", damageType: "piercing", cost: "10 gp", weight: 2, properties: ["Finesse", "Light"] },
      "Trident": { damage: "1d6", damageType: "piercing", cost: "5 gp", weight: 4, properties: ["Thrown", "Versatile"] },
      "War pick": { damage: "1d8", damageType: "piercing", cost: "5 gp", weight: 2, properties: [] },
      "Warhammer": { damage: "1d8", damageType: "bludgeoning", cost: "15 gp", weight: 2, properties: ["Versatile"] },
      "Whip": { damage: "1d4", damageType: "slashing", cost: "2 gp", weight: 3, properties: ["Finesse", "Reach"] },
      "Crossbow, hand": { damage: "1d6", damageType: "piercing", cost: "75 gp", weight: 3, properties: ["Ammunition", "Light", "Loading"] },
      "Crossbow, heavy": { damage: "1d10", damageType: "piercing", cost: "50 gp", weight: 18, properties: ["Ammunition", "Heavy", "Loading", "Two-handed"] },
      "Longbow": { damage: "1d8", damageType: "piercing", cost: "50 gp", weight: 2, properties: ["Ammunition", "Heavy", "Two-handed"] }
    },
    armor: {
      "Padded": { ac: 11, type: "Light", cost: "5 gp", weight: 8, stealthDisadvantage: true },
      "Leather": { ac: 11, type: "Light", cost: "10 gp", weight: 10, stealthDisadvantage: false },
      "Studded leather": { ac: 12, type: "Light", cost: "45 gp", weight: 13, stealthDisadvantage: false },
      "Hide": { ac: 12, type: "Medium", cost: "10 gp", weight: 12, stealthDisadvantage: false },
      "Chain shirt": { ac: 13, type: "Medium", cost: "50 gp", weight: 20, stealthDisadvantage: false },
      "Scale mail": { ac: 14, type: "Medium", cost: "50 gp", weight: 45, stealthDisadvantage: true },
      "Breastplate": { ac: 14, type: "Medium", cost: "400 gp", weight: 20, stealthDisadvantage: false },
      "Half plate": { ac: 15, type: "Medium", cost: "750 gp", weight: 40, stealthDisadvantage: true },
      "Ring mail": { ac: 14, type: "Heavy", cost: "30 gp", weight: 40, stealthDisadvantage: true },
      "Chain mail": { ac: 16, type: "Heavy", cost: "75 gp", weight: 55, stealthDisadvantage: true },
      "Splint": { ac: 17, type: "Heavy", cost: "200 gp", weight: 60, stealthDisadvantage: true },
      "Plate": { ac: 18, type: "Heavy", cost: "1500 gp", weight: 65, stealthDisadvantage: true },
      "Shield": { ac: 2, type: "Shield", cost: "10 gp", weight: 6, stealthDisadvantage: false }
    },
    adventuringGear: {
      "Backpack": { cost: "2 gp", weight: 5 },
      "Bedroll": { cost: "1 sp", weight: 7 },
      "Blanket": { cost: "5 sp", weight: 3 },
      "Rope, hempen (50 feet)": { cost: "2 gp", weight: 10 },
      "Rope, silk (50 feet)": { cost: "10 gp", weight: 5 },
      "Torch": { cost: "1 cp", weight: 1 },
      "Lantern, bullseye": { cost: "10 gp", weight: 2 },
      "Lantern, hooded": { cost: "5 gp", weight: 2 },
      "Oil (flask)": { cost: "1 sp", weight: 1 },
      "Tinderbox": { cost: "5 sp", weight: 1 },
      "Rations (1 day)": { cost: "2 sp", weight: 2 },
      "Waterskin": { cost: "2 gp", weight: 5 },
      "Coin pouch": { cost: "5 sp", weight: 1 },
      "Crowbar": { cost: "2 gp", weight: 5 },
      "Hammer": { cost: "1 gp", weight: 3 },
      "Piton": { cost: "5 cp", weight: 0.25 },
      "Grappling hook": { cost: "2 gp", weight: 4 }
    }
  },
  spells: {
    0: {
      "Acid Splash": { school: "Conjuration", castingTime: "1 action", range: "60 feet", components: "V, S", duration: "Instantaneous", classes: ["Artificer", "Sorcerer", "Wizard"] },
      "Chill Touch": { school: "Necromancy", castingTime: "1 action", range: "120 feet", components: "V, S", duration: "1 round", classes: ["Sorcerer", "Warlock", "Wizard"] },
      "Eldritch Blast": { school: "Evocation", castingTime: "1 action", range: "120 feet", components: "V, S", duration: "Instantaneous", classes: ["Warlock"] },
      "Fire Bolt": { school: "Evocation", castingTime: "1 action", range: "120 feet", components: "V, S", duration: "Instantaneous", classes: ["Artificer", "Sorcerer", "Wizard"] },
      "Guidance": { school: "Divination", castingTime: "1 action", range: "Touch", components: "V, S", duration: "Concentration, up to 1 minute", classes: ["Artificer", "Cleric", "Druid"] },
      "Light": { school: "Evocation", castingTime: "1 action", range: "Touch", components: "V, M", duration: "1 hour", classes: ["Artificer", "Bard", "Cleric", "Sorcerer", "Wizard"] },
      "Mage Hand": { school: "Conjuration", castingTime: "1 action", range: "30 feet", components: "V, S", duration: "1 minute", classes: ["Artificer", "Bard", "Sorcerer", "Warlock", "Wizard"] },
      "Minor Illusion": { school: "Illusion", castingTime: "1 action", range: "30 feet", components: "S, M", duration: "1 minute", classes: ["Bard", "Sorcerer", "Warlock", "Wizard"] },
      "Prestidigitation": { school: "Transmutation", castingTime: "1 action", range: "10 feet", components: "V, S", duration: "Up to 1 hour", classes: ["Artificer", "Bard", "Sorcerer", "Warlock", "Wizard"] },
      "Sacred Flame": { school: "Evocation", castingTime: "1 action", range: "60 feet", components: "V, S", duration: "Instantaneous", classes: ["Cleric"] },
      "Spare the Dying": { school: "Necromancy", castingTime: "1 action", range: "Touch", components: "V, S", duration: "Instantaneous", classes: ["Artificer", "Cleric"] },
      "Thaumaturgy": { school: "Transmutation", castingTime: "1 action", range: "30 feet", components: "V", duration: "Up to 1 minute", classes: ["Cleric"] },
      "Vicious Mockery": { school: "Enchantment", castingTime: "1 action", range: "60 feet", components: "V", duration: "Instantaneous", classes: ["Bard"] }
    },
    1: {
      "Cure Wounds": { school: "Evocation", castingTime: "1 action", range: "Touch", components: "V, S", duration: "Instantaneous", classes: ["Artificer", "Bard", "Cleric", "Druid", "Paladin", "Ranger"] },
      "Healing Word": { school: "Evocation", castingTime: "1 bonus action", range: "60 feet", components: "V", duration: "Instantaneous", classes: ["Bard", "Cleric", "Druid"] },
      "Magic Missile": { school: "Evocation", castingTime: "1 action", range: "120 feet", components: "V, S", duration: "Instantaneous", classes: ["Sorcerer", "Wizard"] },
      "Shield": { school: "Abjuration", castingTime: "1 reaction", range: "Self", components: "V, S", duration: "1 round", classes: ["Sorcerer", "Wizard"] },
      "Burning Hands": { school: "Evocation", castingTime: "1 action", range: "Self (15-foot cone)", components: "V, S", duration: "Instantaneous", classes: ["Sorcerer", "Wizard"] },
      "Detect Magic": { school: "Divination", castingTime: "1 action", range: "Self", components: "V, S", duration: "Concentration, up to 10 minutes", classes: ["Artificer", "Bard", "Cleric", "Druid", "Paladin", "Ranger", "Sorcerer", "Wizard"] },
      "Identify": { school: "Divination", castingTime: "1 minute", range: "Touch", components: "V, S, M", duration: "Instantaneous", classes: ["Artificer", "Bard", "Wizard"] },
      "Sleep": { school: "Enchantment", castingTime: "1 action", range: "90 feet", components: "V, S, M", duration: "1 minute", classes: ["Bard", "Sorcerer", "Wizard"] },
      "Thunderwave": { school: "Evocation", castingTime: "1 action", range: "Self (15-foot cube)", components: "V, S", duration: "Instantaneous", classes: ["Bard", "Druid", "Sorcerer", "Wizard"] }
    }
  },
  experienceTable: {
    1: 0,
    2: 300,
    3: 900,
    4: 2700,
    5: 6500,
    6: 14e3,
    7: 23e3,
    8: 34e3,
    9: 48e3,
    10: 64e3,
    11: 85e3,
    12: 1e5,
    13: 12e4,
    14: 14e4,
    15: 165e3,
    16: 195e3,
    17: 225e3,
    18: 265e3,
    19: 305e3,
    20: 355e3
  }
};

// modals/character-creation-modal.ts
var import_obsidian = require("obsidian");
var CreateDnDCharacterModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    // Equipment and spells
    this.selectedEquipment = [];
    this.selectedSpells = [];
    this.plugin = plugin;
    this.characterData = {
      name: "",
      class: "Fighter",
      subclass: "",
      level: 1,
      race: "Human",
      subrace: "",
      background: "Folk Hero",
      alignment: "True Neutral",
      multiclass: [],
      stats: {
        strength: 10,
        dexterity: 10,
        constitution: 10,
        intelligence: 10,
        wisdom: 10,
        charisma: 10
      },
      backstory: "",
      ideals: "",
      bonds: "",
      flaws: "",
      selectedEquipment: [],
      selectedSpells: []
    };
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("dnd-character-modal");
    const style = contentEl.createEl("style");
    style.textContent = `
            .dnd-character-modal {
                max-width: 900px;
                max-height: 90vh;
                overflow-y: auto;
            }
            .form-section {
                margin-bottom: 20px;
                padding: 15px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
            }
            .form-section h3 {
                margin-top: 0;
                margin-bottom: 15px;
                color: var(--text-accent);
                display: flex;
                align-items: center;
                gap: 8px;
            }
            .form-row {
                display: flex;
                gap: 15px;
                margin-bottom: 15px;
                align-items: end;
            }
            .form-group {
                flex: 1;
            }
            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
            }
            .ability-scores {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 15px;
            }
            .ability-score-group {
                text-align: center;
            }
            .ability-score-group input {
                width: 60px;
                text-align: center;
                font-weight: bold;
            }
            .modifier {
                font-size: 0.9em;
                color: var(--text-muted);
                margin-top: 5px;
            }
            .equipment-grid, .spell-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 10px;
                max-height: 200px;
                overflow-y: auto;
                border: 1px solid var(--background-modifier-border);
                padding: 10px;
                border-radius: 4px;
            }
            .equipment-item, .spell-item {
                display: flex;
                align-items: center;
                gap: 8px;
                padding: 4px;
            }
            .btn-group {
                display: flex;
                gap: 10px;
                margin-bottom: 15px;
            }
        `;
    contentEl.createEl("h2", { text: "Create New D&D 5e Character" });
    this.createBasicInfoSection(contentEl);
    this.createAbilityScoresSection(contentEl);
    this.createEquipmentSection(contentEl);
    this.createSpellsSection(contentEl);
    this.createBackgroundSection(contentEl);
    this.createButtons(contentEl);
    this.updateSubclassOptions();
    this.updateSubraceOptions();
    this.updateEquipmentOptions();
    this.updateSpellOptions();
  }
  createBasicInfoSection(contentEl) {
    const basicSection = contentEl.createDiv("form-section");
    basicSection.createEl("h3", { text: "\u2694\uFE0F Basic Information" });
    const basicRow1 = basicSection.createDiv("form-row");
    const nameGroup = basicRow1.createDiv("form-group");
    nameGroup.createEl("label", { text: "Character Name:" });
    this.nameInput = new import_obsidian.TextComponent(nameGroup);
    this.nameInput.inputEl.placeholder = "Enter character name...";
    const levelGroup = basicRow1.createDiv("form-group");
    levelGroup.createEl("label", { text: "Level:" });
    this.levelInput = new import_obsidian.TextComponent(levelGroup);
    this.levelInput.setValue("1");
    this.levelInput.inputEl.type = "number";
    this.levelInput.inputEl.min = "1";
    this.levelInput.inputEl.max = "20";
    this.levelInput.onChange(() => {
      this.updateSpellOptions();
    });
    const basicRow2 = basicSection.createDiv("form-row");
    const classGroup = basicRow2.createDiv("form-group");
    classGroup.createEl("label", { text: "Class:" });
    this.classDropdown = new import_obsidian.DropdownComponent(classGroup);
    Object.keys(DND_DATA.classes).forEach((className) => {
      this.classDropdown.addOption(className, className);
    });
    this.classDropdown.onChange((value) => {
      this.characterData.class = value;
      this.updateSubclassOptions();
      this.updateSpellOptions();
    });
    const subclassGroup = basicRow2.createDiv("form-group");
    subclassGroup.createEl("label", { text: "Subclass:" });
    this.subclassDropdown = new import_obsidian.DropdownComponent(subclassGroup);
    this.updateSubclassOptions();
    const raceSection = contentEl.createDiv("form-section");
    raceSection.createEl("h3", { text: "\u{1F9D9}\u200D\u2642\uFE0F Race & Background" });
    const raceRow = raceSection.createDiv("form-row");
    const raceGroup = raceRow.createDiv("form-group");
    raceGroup.createEl("label", { text: "Race:" });
    this.raceDropdown = new import_obsidian.DropdownComponent(raceGroup);
    Object.keys(DND_DATA.races).forEach((raceName) => {
      this.raceDropdown.addOption(raceName, raceName);
    });
    this.raceDropdown.onChange((value) => {
      this.characterData.race = value;
      this.updateSubraceOptions();
    });
    const subraceGroup = raceRow.createDiv("form-group");
    subraceGroup.createEl("label", { text: "Subrace:" });
    this.subraceDropdown = new import_obsidian.DropdownComponent(subraceGroup);
    this.updateSubraceOptions();
    const backgroundGroup = raceRow.createDiv("form-group");
    backgroundGroup.createEl("label", { text: "Background:" });
    this.backgroundDropdown = new import_obsidian.DropdownComponent(backgroundGroup);
    DND_DATA.backgrounds.forEach((bg) => {
      this.backgroundDropdown.addOption(bg, bg);
    });
    const alignmentGroup = raceRow.createDiv("form-group");
    alignmentGroup.createEl("label", { text: "Alignment:" });
    this.alignmentDropdown = new import_obsidian.DropdownComponent(alignmentGroup);
    DND_DATA.alignments.forEach((alignment) => {
      this.alignmentDropdown.addOption(alignment, alignment);
    });
  }
  createAbilityScoresSection(contentEl) {
    const statsSection = contentEl.createDiv("form-section");
    statsSection.createEl("h3", { text: "\u{1F3B2} Ability Scores" });
    const btnGroup = statsSection.createDiv("btn-group");
    const rollButton = btnGroup.createEl("button", { text: "\u{1F3B2} Roll 4d6 Drop Lowest" });
    rollButton.onclick = () => this.rollAbilityScores();
    const pointBuyButton = btnGroup.createEl("button", { text: "\u{1F4CA} Point Buy (27 points)" });
    pointBuyButton.onclick = () => this.setPointBuyScores();
    const arrayButton = btnGroup.createEl("button", { text: "\u{1F4CB} Standard Array" });
    arrayButton.onclick = () => this.setStandardArray();
    const statsGrid = statsSection.createDiv("ability-scores");
    this.createAbilityScoreInput(statsGrid, "Strength", "strInput");
    this.createAbilityScoreInput(statsGrid, "Dexterity", "dexInput");
    this.createAbilityScoreInput(statsGrid, "Constitution", "conInput");
    this.createAbilityScoreInput(statsGrid, "Intelligence", "intInput");
    this.createAbilityScoreInput(statsGrid, "Wisdom", "wisInput");
    this.createAbilityScoreInput(statsGrid, "Charisma", "chaInput");
  }
  createEquipmentSection(contentEl) {
    const equipmentSection = contentEl.createDiv("form-section");
    equipmentSection.createEl("h3", { text: "\u2694\uFE0F Starting Equipment" });
    const equipmentGrid = equipmentSection.createDiv("equipment-grid");
    equipmentGrid.id = "equipment-grid";
    const equipmentNote = equipmentSection.createEl("p");
    equipmentNote.style.fontSize = "0.9em";
    equipmentNote.style.color = "var(--text-muted)";
    equipmentNote.textContent = "Select starting weapons, armor, and gear. Equipment list updates based on your class.";
  }
  createSpellsSection(contentEl) {
    const spellsSection = contentEl.createDiv("form-section");
    spellsSection.createEl("h3", { text: "\u2728 Spells" });
    const spellGrid = spellsSection.createDiv("spell-grid");
    spellGrid.id = "spell-grid";
    const spellNote = spellsSection.createEl("p");
    spellNote.style.fontSize = "0.9em";
    spellNote.style.color = "var(--text-muted)";
    spellNote.textContent = "Select known spells. Available spells depend on your class and level.";
  }
  createBackgroundSection(contentEl) {
    const backgroundSection = contentEl.createDiv("form-section");
    backgroundSection.createEl("h3", { text: "\u{1F4D6} Character Background" });
    const idealsGroup = backgroundSection.createDiv("form-group");
    idealsGroup.createEl("label", { text: "Ideals:" });
    this.idealsInput = new import_obsidian.TextComponent(idealsGroup);
    this.idealsInput.inputEl.placeholder = "What drives your character?";
    const bondsGroup = backgroundSection.createDiv("form-group");
    bondsGroup.createEl("label", { text: "Bonds:" });
    this.bondsInput = new import_obsidian.TextComponent(bondsGroup);
    this.bondsInput.inputEl.placeholder = "What connects your character to the world?";
    const flawsGroup = backgroundSection.createDiv("form-group");
    flawsGroup.createEl("label", { text: "Flaws:" });
    this.flawsInput = new import_obsidian.TextComponent(flawsGroup);
    this.flawsInput.inputEl.placeholder = "What weakness does your character have?";
    const backstoryGroup = backgroundSection.createDiv("form-group");
    backstoryGroup.createEl("label", { text: "Backstory:" });
    this.backstoryInput = new import_obsidian.TextAreaComponent(backstoryGroup);
    this.backstoryInput.inputEl.placeholder = "Tell your character's story...";
    this.backstoryInput.inputEl.rows = 4;
  }
  createButtons(contentEl) {
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.textAlign = "right";
    buttonContainer.style.borderTop = "1px solid var(--background-modifier-border)";
    buttonContainer.style.paddingTop = "15px";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.style.marginRight = "10px";
    cancelButton.onclick = () => this.close();
    const createButton = buttonContainer.createEl("button", { text: "Create Character", cls: "mod-cta" });
    createButton.onclick = () => this.createCharacter();
  }
  createAbilityScoreInput(container, abilityName, inputProperty) {
    const group = container.createDiv("ability-score-group");
    group.createEl("label", { text: abilityName });
    const input = new import_obsidian.TextComponent(group);
    input.setValue("10");
    input.inputEl.type = "number";
    input.inputEl.min = "1";
    input.inputEl.max = "20";
    const modifierEl = group.createDiv("modifier");
    modifierEl.textContent = "+0";
    input.onChange((value) => {
      const score = parseInt(value) || 10;
      const modifier = this.plugin.calculateAbilityModifier(score);
      modifierEl.textContent = modifier >= 0 ? `+${modifier}` : `${modifier}`;
    });
    this[inputProperty] = input;
  }
  updateSubclassOptions() {
    this.subclassDropdown.selectEl.empty();
    this.subclassDropdown.addOption("", "None (Level 1-2)");
    const classData = DND_DATA.classes[this.characterData.class];
    if (classData && classData.subclasses) {
      classData.subclasses.forEach((subclass) => {
        this.subclassDropdown.addOption(subclass, subclass);
      });
    }
  }
  updateSubraceOptions() {
    this.subraceDropdown.selectEl.empty();
    this.subraceDropdown.addOption("", "None");
    const raceData = DND_DATA.races[this.characterData.race];
    if (raceData && raceData.subraces && raceData.subraces.length > 0) {
      raceData.subraces.forEach((subrace) => {
        this.subraceDropdown.addOption(subrace, subrace);
      });
    }
  }
  updateEquipmentOptions() {
    const equipmentGrid = document.getElementById("equipment-grid");
    if (!equipmentGrid) return;
    equipmentGrid.empty();
    const weaponsHeader = equipmentGrid.createEl("h4", { text: "Weapons" });
    weaponsHeader.style.gridColumn = "1 / -1";
    Object.keys(DND_DATA.equipment.weapons).forEach((weapon) => {
      const item = equipmentGrid.createDiv("equipment-item");
      const checkbox = item.createEl("input");
      checkbox.type = "checkbox";
      checkbox.id = `weapon-${weapon}`;
      checkbox.onchange = () => this.toggleEquipment(weapon, checkbox.checked);
      const label = item.createEl("label");
      label.setAttribute("for", `weapon-${weapon}`);
      label.textContent = weapon;
    });
    const armorHeader = equipmentGrid.createEl("h4", { text: "Armor" });
    armorHeader.style.gridColumn = "1 / -1";
    Object.keys(DND_DATA.equipment.armor).forEach((armor) => {
      const item = equipmentGrid.createDiv("equipment-item");
      const checkbox = item.createEl("input");
      checkbox.type = "checkbox";
      checkbox.id = `armor-${armor}`;
      checkbox.onchange = () => this.toggleEquipment(armor, checkbox.checked);
      const label = item.createEl("label");
      label.setAttribute("for", `armor-${armor}`);
      label.textContent = armor;
    });
    const gearHeader = equipmentGrid.createEl("h4", { text: "Adventuring Gear" });
    gearHeader.style.gridColumn = "1 / -1";
    Object.keys(DND_DATA.equipment.adventuringGear).slice(0, 15).forEach((gear) => {
      const item = equipmentGrid.createDiv("equipment-item");
      const checkbox = item.createEl("input");
      checkbox.type = "checkbox";
      checkbox.id = `gear-${gear}`;
      checkbox.onchange = () => this.toggleEquipment(gear, checkbox.checked);
      const label = item.createEl("label");
      label.setAttribute("for", `gear-${gear}`);
      label.textContent = gear;
    });
  }
  updateSpellOptions() {
    const spellGrid = document.getElementById("spell-grid");
    if (!spellGrid) return;
    spellGrid.empty();
    const currentClass = this.classDropdown.getValue();
    const currentLevel = parseInt(this.levelInput.getValue()) || 1;
    const classData = DND_DATA.classes[currentClass];
    if (!classData || !classData.spellcaster) {
      spellGrid.createEl("p", { text: "This class does not cast spells." });
      return;
    }
    if (DND_DATA.spells[0]) {
      const cantripsHeader = spellGrid.createEl("h4", { text: "Cantrips" });
      cantripsHeader.style.gridColumn = "1 / -1";
      Object.keys(DND_DATA.spells[0]).forEach((spell) => {
        const spellData = DND_DATA.spells[0][spell];
        if (spellData.classes.includes(currentClass)) {
          const item = spellGrid.createDiv("spell-item");
          const checkbox = item.createEl("input");
          checkbox.type = "checkbox";
          checkbox.id = `spell-${spell}`;
          checkbox.onchange = () => this.toggleSpell(spell, checkbox.checked);
          const label = item.createEl("label");
          label.setAttribute("for", `spell-${spell}`);
          label.textContent = spell;
        }
      });
    }
    if (DND_DATA.spells[1] && currentLevel >= 1) {
      const firstLevelHeader = spellGrid.createEl("h4", { text: "1st Level Spells" });
      firstLevelHeader.style.gridColumn = "1 / -1";
      Object.keys(DND_DATA.spells[1]).forEach((spell) => {
        const spellData = DND_DATA.spells[1][spell];
        if (spellData.classes.includes(currentClass)) {
          const item = spellGrid.createDiv("spell-item");
          const checkbox = item.createEl("input");
          checkbox.type = "checkbox";
          checkbox.id = `spell-${spell}`;
          checkbox.onchange = () => this.toggleSpell(spell, checkbox.checked);
          const label = item.createEl("label");
          label.setAttribute("for", `spell-${spell}`);
          label.textContent = spell;
        }
      });
    }
  }
  toggleEquipment(equipment, isSelected) {
    if (isSelected) {
      if (!this.selectedEquipment.includes(equipment)) {
        this.selectedEquipment.push(equipment);
      }
    } else {
      this.selectedEquipment = this.selectedEquipment.filter((item) => item !== equipment);
    }
  }
  toggleSpell(spell, isSelected) {
    if (isSelected) {
      if (!this.selectedSpells.includes(spell)) {
        this.selectedSpells.push(spell);
      }
    } else {
      this.selectedSpells = this.selectedSpells.filter((item) => item !== spell);
    }
  }
  rollAbilityScores() {
    const rollStat = () => {
      const rolls = Array.from({ length: 4 }, () => Math.floor(Math.random() * 6) + 1);
      rolls.sort((a, b) => b - a);
      return rolls.slice(0, 3).reduce((sum, roll) => sum + roll, 0);
    };
    this.strInput.setValue(rollStat().toString());
    this.dexInput.setValue(rollStat().toString());
    this.conInput.setValue(rollStat().toString());
    this.intInput.setValue(rollStat().toString());
    this.wisInput.setValue(rollStat().toString());
    this.chaInput.setValue(rollStat().toString());
    [this.strInput, this.dexInput, this.conInput, this.intInput, this.wisInput, this.chaInput].forEach((input) => {
      input.onChanged();
    });
    new import_obsidian.Notice("Ability scores rolled!");
  }
  setPointBuyScores() {
    this.strInput.setValue("15");
    this.dexInput.setValue("14");
    this.conInput.setValue("13");
    this.intInput.setValue("12");
    this.wisInput.setValue("10");
    this.chaInput.setValue("8");
    [this.strInput, this.dexInput, this.conInput, this.intInput, this.wisInput, this.chaInput].forEach((input) => {
      input.onChanged();
    });
    new import_obsidian.Notice("Point buy scores set! Arrange as desired.");
  }
  setStandardArray() {
    this.strInput.setValue("15");
    this.dexInput.setValue("14");
    this.conInput.setValue("13");
    this.intInput.setValue("12");
    this.wisInput.setValue("10");
    this.chaInput.setValue("8");
    [this.strInput, this.dexInput, this.conInput, this.intInput, this.wisInput, this.chaInput].forEach((input) => {
      input.onChanged();
    });
    new import_obsidian.Notice("Standard array applied! Arrange as desired.");
  }
  async createCharacter() {
    const name = this.nameInput.getValue().trim();
    if (!name) {
      new import_obsidian.Notice("Please enter a character name.");
      return;
    }
    const existingFile = this.app.vault.getAbstractFileByPath(`${this.plugin.settings.charactersFolder}/${name}.md`);
    if (existingFile) {
      new import_obsidian.Notice("A character with this name already exists.");
      return;
    }
    this.characterData.name = name;
    this.characterData.class = this.classDropdown.getValue();
    this.characterData.subclass = this.subclassDropdown.getValue();
    this.characterData.level = parseInt(this.levelInput.getValue()) || 1;
    this.characterData.race = this.raceDropdown.getValue();
    this.characterData.subrace = this.subraceDropdown.getValue();
    this.characterData.background = this.backgroundDropdown.getValue();
    this.characterData.alignment = this.alignmentDropdown.getValue();
    this.characterData.stats = {
      strength: parseInt(this.strInput.getValue()) || 10,
      dexterity: parseInt(this.dexInput.getValue()) || 10,
      constitution: parseInt(this.conInput.getValue()) || 10,
      intelligence: parseInt(this.intInput.getValue()) || 10,
      wisdom: parseInt(this.wisInput.getValue()) || 10,
      charisma: parseInt(this.chaInput.getValue()) || 10
    };
    this.characterData.backstory = this.backstoryInput.getValue();
    this.characterData.ideals = this.idealsInput.getValue();
    this.characterData.bonds = this.bondsInput.getValue();
    this.characterData.flaws = this.flawsInput.getValue();
    this.characterData.selectedEquipment = this.selectedEquipment;
    this.characterData.selectedSpells = this.selectedSpells;
    await this.plugin.createDnDCharacter(this.characterData);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/basic-character-modal.ts
var import_obsidian2 = require("obsidian");
var CreateCharacterModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Create New Character (Basic)" });
    const nameContainer = contentEl.createDiv();
    nameContainer.createEl("label", { text: "Character Name:" });
    this.nameInput = new import_obsidian2.TextComponent(nameContainer);
    this.nameInput.inputEl.style.width = "100%";
    this.nameInput.inputEl.style.marginTop = "8px";
    this.nameInput.inputEl.placeholder = "Enter character name...";
    const infoContainer = contentEl.createDiv();
    infoContainer.style.marginTop = "15px";
    infoContainer.style.padding = "10px";
    infoContainer.style.backgroundColor = "var(--background-secondary)";
    infoContainer.style.borderRadius = "4px";
    infoContainer.style.fontSize = "0.9em";
    infoContainer.innerHTML = `
            <p><strong>Note:</strong> This creates a basic character without D&D mechanics.</p>
            <p>For full D&D 5e characters with stats, spells, and equipment, use <strong>"Create D&D Character"</strong> instead.</p>
        `;
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.textAlign = "right";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.style.marginRight = "10px";
    cancelButton.onclick = () => this.close();
    const createButton = buttonContainer.createEl("button", { text: "Create", cls: "mod-cta" });
    createButton.onclick = () => this.createCharacter();
    this.nameInput.inputEl.focus();
    this.nameInput.inputEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.createCharacter();
      }
    });
  }
  async createCharacter() {
    const name = this.nameInput.getValue().trim();
    if (!name) {
      new import_obsidian2.Notice("Please enter a character name.");
      return;
    }
    const existingFile = this.app.vault.getAbstractFileByPath(`${this.plugin.settings.charactersFolder}/${name}.md`);
    if (existingFile) {
      new import_obsidian2.Notice("A character with this name already exists.");
      return;
    }
    await this.plugin.createCharacter(name);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/character-list-modal.ts
var import_obsidian6 = require("obsidian");

// modals/equipment-modal.ts
var import_obsidian3 = require("obsidian");
var EquipmentModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.selectedCharacter = null;
    this.currentTab = "weapons";
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const style = contentEl.createEl("style");
    style.textContent = `
            .equipment-modal {
                max-width: 900px;
                max-height: 85vh;
                overflow-y: auto;
            }
            .tab-container {
                display: flex;
                gap: 5px;
                margin-bottom: 20px;
                border-bottom: 1px solid var(--background-modifier-border);
            }
            .tab-button {
                padding: 10px 20px;
                border: none;
                background: none;
                cursor: pointer;
                border-bottom: 2px solid transparent;
                transition: all 0.2s;
            }
            .tab-button:hover {
                background-color: var(--background-modifier-hover);
            }
            .tab-button.active {
                border-bottom-color: var(--interactive-accent);
                background-color: var(--background-modifier-hover);
            }
            .equipment-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
            }
            .equipment-table th,
            .equipment-table td {
                border: 1px solid var(--background-modifier-border);
                padding: 8px 12px;
                text-align: left;
            }
            .equipment-table th {
                background-color: var(--background-secondary);
                font-weight: 600;
                position: sticky;
                top: 0;
                z-index: 1;
            }
            .equipment-table tr:hover {
                background-color: var(--background-modifier-hover);
            }
            .equipment-display {
                max-height: 500px;
                overflow-y: auto;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
            }
            .character-selector {
                margin-bottom: 20px;
                padding: 15px;
                background-color: var(--background-secondary);
                border-radius: 6px;
            }
            .search-box {
                width: 100%;
                padding: 8px;
                margin-bottom: 15px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                background: var(--background-primary);
            }
        `;
    contentEl.addClass("equipment-modal");
    contentEl.createEl("h2", { text: "Equipment Database" });
    if (this.plugin.characters.length > 0) {
      const characterSection = contentEl.createDiv("character-selector");
      characterSection.createEl("h3", { text: "Character Selection" });
      characterSection.createEl("label", { text: "Select Character (optional):" });
      const characterDropdown = new import_obsidian3.DropdownComponent(characterSection);
      characterDropdown.addOption("", "Browse All Equipment");
      this.plugin.characters.forEach((char) => {
        characterDropdown.addOption(char.name, char.name);
      });
      characterDropdown.onChange((value) => {
        this.selectedCharacter = value ? this.plugin.characters.find((char) => char.name === value) || null : null;
        this.displayCurrentTab();
      });
    }
    const searchBox = contentEl.createEl("input", {
      type: "text",
      placeholder: "Search equipment...",
      cls: "search-box"
    });
    let searchTimeout;
    searchBox.addEventListener("input", (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        this.displayCurrentTab(e.target.value);
      }, 300);
    });
    const tabContainer = contentEl.createDiv("tab-container");
    const weaponsTab = tabContainer.createEl("button", { text: "\u2694\uFE0F Weapons", cls: "tab-button active" });
    const armorTab = tabContainer.createEl("button", { text: "\u{1F6E1}\uFE0F Armor", cls: "tab-button" });
    const gearTab = tabContainer.createEl("button", { text: "\u{1F392} Adventuring Gear", cls: "tab-button" });
    const equipmentDisplay = contentEl.createDiv("equipment-display");
    weaponsTab.onclick = () => this.setActiveTab("weapons", weaponsTab, [weaponsTab, armorTab, gearTab]);
    armorTab.onclick = () => this.setActiveTab("armor", armorTab, [weaponsTab, armorTab, gearTab]);
    gearTab.onclick = () => this.setActiveTab("gear", gearTab, [weaponsTab, armorTab, gearTab]);
    this.equipmentDisplay = equipmentDisplay;
    this.displayWeapons();
  }
  setActiveTab(tab, activeButton, allButtons) {
    allButtons.forEach((btn) => btn.removeClass("active"));
    activeButton.addClass("active");
    this.currentTab = tab;
    this.displayCurrentTab();
  }
  displayCurrentTab(searchTerm = "") {
    switch (this.currentTab) {
      case "weapons":
        this.displayWeapons(searchTerm);
        break;
      case "armor":
        this.displayArmor(searchTerm);
        break;
      case "gear":
        this.displayGear(searchTerm);
        break;
    }
  }
  displayWeapons(searchTerm = "") {
    this.equipmentDisplay.empty();
    const table = this.equipmentDisplay.createEl("table", { cls: "equipment-table" });
    const header = table.createEl("thead");
    const headerRow = header.createEl("tr");
    ["Name", "Damage", "Type", "Cost", "Weight", "Properties"].forEach((text) => {
      headerRow.createEl("th", { text });
    });
    const tbody = table.createEl("tbody");
    const weapons = Object.entries(DND_DATA.equipment.weapons);
    const filteredWeapons = searchTerm ? weapons.filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase())) : weapons;
    if (filteredWeapons.length === 0) {
      const noResults = tbody.createEl("tr");
      const cell = noResults.createEl("td", { text: "No weapons found matching your search." });
      cell.colSpan = 6;
      cell.style.textAlign = "center";
      cell.style.fontStyle = "italic";
      cell.style.color = "var(--text-muted)";
      return;
    }
    filteredWeapons.forEach(([name, data]) => {
      const row = tbody.createEl("tr");
      row.createEl("td", { text: name, attr: { style: "font-weight: 600;" } });
      row.createEl("td", { text: data.damage });
      row.createEl("td", { text: data.damageType });
      row.createEl("td", { text: data.cost });
      row.createEl("td", { text: `${data.weight} lb` });
      row.createEl("td", { text: data.properties.join(", ") });
    });
  }
  displayArmor(searchTerm = "") {
    this.equipmentDisplay.empty();
    const table = this.equipmentDisplay.createEl("table", { cls: "equipment-table" });
    const header = table.createEl("thead");
    const headerRow = header.createEl("tr");
    ["Name", "AC", "Type", "Cost", "Weight", "Stealth"].forEach((text) => {
      headerRow.createEl("th", { text });
    });
    const tbody = table.createEl("tbody");
    const armor = Object.entries(DND_DATA.equipment.armor);
    const filteredArmor = searchTerm ? armor.filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase())) : armor;
    if (filteredArmor.length === 0) {
      const noResults = tbody.createEl("tr");
      const cell = noResults.createEl("td", { text: "No armor found matching your search." });
      cell.colSpan = 6;
      cell.style.textAlign = "center";
      cell.style.fontStyle = "italic";
      cell.style.color = "var(--text-muted)";
      return;
    }
    filteredArmor.forEach(([name, data]) => {
      const row = tbody.createEl("tr");
      row.createEl("td", { text: name, attr: { style: "font-weight: 600;" } });
      row.createEl("td", { text: data.ac.toString() });
      row.createEl("td", { text: data.type });
      row.createEl("td", { text: data.cost });
      row.createEl("td", { text: `${data.weight} lb` });
      const stealthCell = row.createEl("td");
      if (data.stealthDisadvantage) {
        stealthCell.textContent = "Disadvantage";
        stealthCell.style.color = "var(--text-error)";
      } else {
        stealthCell.textContent = "Normal";
        stealthCell.style.color = "var(--text-success)";
      }
    });
  }
  displayGear(searchTerm = "") {
    this.equipmentDisplay.empty();
    const table = this.equipmentDisplay.createEl("table", { cls: "equipment-table" });
    const header = table.createEl("thead");
    const headerRow = header.createEl("tr");
    ["Name", "Cost", "Weight"].forEach((text) => {
      headerRow.createEl("th", { text });
    });
    const tbody = table.createEl("tbody");
    const gear = Object.entries(DND_DATA.equipment.adventuringGear);
    const filteredGear = searchTerm ? gear.filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase())) : gear;
    if (filteredGear.length === 0) {
      const noResults = tbody.createEl("tr");
      const cell = noResults.createEl("td", { text: "No gear found matching your search." });
      cell.colSpan = 3;
      cell.style.textAlign = "center";
      cell.style.fontStyle = "italic";
      cell.style.color = "var(--text-muted)";
      return;
    }
    filteredGear.forEach(([name, data]) => {
      const row = tbody.createEl("tr");
      row.createEl("td", { text: name, attr: { style: "font-weight: 600;" } });
      row.createEl("td", { text: data.cost });
      row.createEl("td", { text: `${data.weight} lb` });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/spell-modal.ts
var import_obsidian4 = require("obsidian");
var SpellModal = class extends import_obsidian4.Modal {
  constructor(app, plugin) {
    super(app);
    this.currentLevel = 0;
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const style = contentEl.createEl("style");
    style.textContent = `
            .spell-modal {
                max-width: 1000px;
                max-height: 85vh;
                overflow-y: auto;
            }
            .spell-filters {
                display: flex;
                gap: 15px;
                margin-bottom: 20px;
                padding: 15px;
                background-color: var(--background-secondary);
                border-radius: 6px;
                flex-wrap: wrap;
                align-items: end;
            }
            .filter-group {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }
            .filter-group label {
                font-size: 0.9em;
                font-weight: 500;
            }
            .tab-container {
                display: flex;
                gap: 5px;
                margin-bottom: 20px;
                border-bottom: 1px solid var(--background-modifier-border);
                flex-wrap: wrap;
            }
            .tab-button {
                padding: 8px 16px;
                border: none;
                background: none;
                cursor: pointer;
                border-bottom: 2px solid transparent;
                transition: all 0.2s;
                font-size: 0.9em;
            }
            .tab-button:hover {
                background-color: var(--background-modifier-hover);
            }
            .tab-button.active {
                border-bottom-color: var(--interactive-accent);
                background-color: var(--background-modifier-hover);
            }
            .spell-table {
                width: 100%;
                border-collapse: collapse;
            }
            .spell-table th,
            .spell-table td {
                border: 1px solid var(--background-modifier-border);
                padding: 8px 12px;
                text-align: left;
                vertical-align: top;
            }
            .spell-table th {
                background-color: var(--background-secondary);
                font-weight: 600;
                position: sticky;
                top: 0;
                z-index: 1;
            }
            .spell-table tr:hover {
                background-color: var(--background-modifier-hover);
            }
            .spell-display {
                max-height: 500px;
                overflow-y: auto;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
            }
            .spell-name {
                font-weight: 600;
                color: var(--text-accent);
            }
            .spell-school {
                font-size: 0.85em;
                color: var(--text-muted);
                font-style: italic;
            }
            .spell-classes {
                font-size: 0.85em;
                word-wrap: break-word;
            }
            .search-box {
                flex: 1;
                min-width: 200px;
                padding: 8px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                background: var(--background-primary);
            }
            .class-filter {
                min-width: 120px;
            }
        `;
    contentEl.addClass("spell-modal");
    contentEl.createEl("h2", { text: "Spell Database" });
    const filtersSection = contentEl.createDiv("spell-filters");
    const searchGroup = filtersSection.createDiv("filter-group");
    searchGroup.createEl("label", { text: "Search Spells:" });
    const searchBox = searchGroup.createEl("input", {
      type: "text",
      placeholder: "Search by spell name...",
      cls: "search-box"
    });
    const classGroup = filtersSection.createDiv("filter-group");
    classGroup.createEl("label", { text: "Filter by Class:" });
    const classFilter = new import_obsidian4.DropdownComponent(classGroup);
    classFilter.selectEl.addClass("class-filter");
    classFilter.addOption("", "All Classes");
    const allClasses = /* @__PURE__ */ new Set();
    Object.values(DND_DATA.spells).forEach((spellLevel) => {
      Object.values(spellLevel).forEach((spell) => {
        spell.classes.forEach((cls) => allClasses.add(cls));
      });
    });
    Array.from(allClasses).sort().forEach((className) => {
      classFilter.addOption(className, className);
    });
    let searchTimeout;
    const performSearch = () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        this.displaySpells(this.currentLevel, searchBox.value, classFilter.getValue());
      }, 300);
    };
    searchBox.addEventListener("input", performSearch);
    classFilter.onChange(() => {
      this.displaySpells(this.currentLevel, searchBox.value, classFilter.getValue());
    });
    const tabContainer = contentEl.createDiv("tab-container");
    const spellDisplay = contentEl.createDiv("spell-display");
    this.spellDisplay = spellDisplay;
    const tabs = [];
    for (let level = 0; level <= 1; level++) {
      const tab = tabContainer.createEl("button", { cls: "tab-button" });
      tab.textContent = level === 0 ? "Cantrips (0)" : `Level ${level}`;
      if (level === 0) {
        tab.addClass("active");
      }
      tab.onclick = () => {
        tabs.forEach((t) => t.removeClass("active"));
        tab.addClass("active");
        this.currentLevel = level;
        this.displaySpells(level, searchBox.value, classFilter.getValue());
      };
      tabs.push(tab);
    }
    const infoSection = contentEl.createDiv();
    infoSection.style.marginTop = "20px";
    infoSection.style.padding = "15px";
    infoSection.style.backgroundColor = "var(--background-secondary)";
    infoSection.style.borderRadius = "6px";
    infoSection.style.fontSize = "0.9em";
    infoSection.createEl("h4", { text: "\u{1F4DA} Spell Database Info" });
    const infoList = infoSection.createEl("ul");
    infoList.createEl("li", { text: "Currently includes Cantrips and 1st Level spells from D&D 5e (2014)" });
    infoList.createEl("li", { text: "Filter by class to see spells available to specific character types" });
    infoList.createEl("li", { text: "Search by spell name to quickly find specific spells" });
    infoList.createEl("li", { text: "More spell levels can be added in future updates" });
    this.displaySpells(0);
  }
  displaySpells(level, searchTerm = "", classFilter = "") {
    this.spellDisplay.empty();
    if (!DND_DATA.spells[level]) {
      this.spellDisplay.createEl("p", {
        text: "No spells available for this level.",
        attr: { style: "text-align: center; padding: 40px; color: var(--text-muted); font-style: italic;" }
      });
      return;
    }
    const table = this.spellDisplay.createEl("table", { cls: "spell-table" });
    const header = table.createEl("thead");
    const headerRow = header.createEl("tr");
    ["Spell", "School", "Casting Time", "Range", "Components", "Duration", "Classes"].forEach((text) => {
      headerRow.createEl("th", { text });
    });
    const tbody = table.createEl("tbody");
    let spells = Object.entries(DND_DATA.spells[level]);
    if (searchTerm) {
      spells = spells.filter(
        ([name]) => name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    if (classFilter) {
      spells = spells.filter(([_, spell]) => {
        const spellData = spell;
        return spellData.classes.includes(classFilter);
      });
    }
    if (spells.length === 0) {
      const noResults = tbody.createEl("tr");
      const cell = noResults.createEl("td", {
        text: searchTerm || classFilter ? "No spells found matching your filters." : "No spells available for this level."
      });
      cell.colSpan = 7;
      cell.style.textAlign = "center";
      cell.style.fontStyle = "italic";
      cell.style.color = "var(--text-muted)";
      cell.style.padding = "20px";
      return;
    }
    spells.forEach(([name, data]) => {
      const spellData = data;
      const row = tbody.createEl("tr");
      const nameCell = row.createEl("td");
      nameCell.createDiv({ cls: "spell-name", text: name });
      nameCell.createDiv({ cls: "spell-school", text: spellData.school });
      row.createEl("td", { text: spellData.school });
      row.createEl("td", { text: spellData.castingTime });
      row.createEl("td", { text: spellData.range });
      row.createEl("td", { text: spellData.components });
      row.createEl("td", { text: spellData.duration });
      const classesCell = row.createEl("td", { cls: "spell-classes" });
      classesCell.textContent = spellData.classes.join(", ");
      if (classFilter) {
        const highlightedText = classesCell.textContent.replace(
          new RegExp(`\\b${classFilter}\\b`, "gi"),
          `<strong style="color: var(--text-accent);">$&</strong>`
        );
        classesCell.innerHTML = highlightedText;
      }
    });
    const countInfo = this.spellDisplay.createDiv();
    countInfo.style.padding = "10px";
    countInfo.style.textAlign = "center";
    countInfo.style.fontSize = "0.9em";
    countInfo.style.color = "var(--text-muted)";
    countInfo.style.borderTop = "1px solid var(--background-modifier-border)";
    const levelName = level === 0 ? "Cantrips" : `Level ${level} Spells`;
    const filterInfo = searchTerm || classFilter ? " (filtered)" : "";
    countInfo.textContent = `Showing ${spells.length} ${levelName}${filterInfo}`;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/level-up-modal.ts
var import_obsidian5 = require("obsidian");
var LevelUpModal = class extends import_obsidian5.Modal {
  constructor(app, plugin) {
    super(app);
    this.selectedCharacter = null;
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const style = contentEl.createEl("style");
    style.textContent = `
            .level-up-modal {
                max-width: 700px;
                max-height: 85vh;
                overflow-y: auto;
            }
            .character-status {
                padding: 20px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
                margin-bottom: 20px;
                background-color: var(--background-secondary);
            }
            .status-header {
                font-size: 1.3em;
                font-weight: bold;
                margin-bottom: 15px;
                color: var(--text-accent);
            }
            .status-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin-bottom: 15px;
            }
            .status-item {
                display: flex;
                justify-content: space-between;
                padding: 8px 0;
                border-bottom: 1px solid var(--background-modifier-border-hover);
            }
            .status-label {
                font-weight: 500;
            }
            .status-value {
                color: var(--text-accent);
                font-weight: bold;
            }
            .xp-section {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
            }
            .xp-input-group {
                display: flex;
                gap: 10px;
                align-items: end;
                margin-top: 10px;
            }
            .xp-input {
                flex: 1;
                max-width: 150px;
            }
            .level-up-section {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid var(--interactive-accent);
                border-radius: 6px;
                background-color: var(--background-primary);
            }
            .features-list {
                background-color: var(--background-secondary);
                padding: 15px;
                border-radius: 6px;
                margin: 15px 0;
            }
            .features-list h4 {
                margin-top: 0;
                color: var(--text-accent);
            }
            .features-list ul {
                margin: 10px 0;
                padding-left: 20px;
            }
            .features-list li {
                margin: 5px 0;
            }
            .action-buttons {
                display: flex;
                gap: 10px;
                margin-top: 15px;
            }
            .progress-bar {
                width: 100%;
                height: 20px;
                background-color: var(--background-modifier-border);
                border-radius: 10px;
                overflow: hidden;
                margin: 10px 0;
            }
            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, var(--interactive-accent), var(--interactive-accent-hover));
                transition: width 0.3s ease;
            }
            .ready-to-level {
                border-color: var(--color-green);
                background-color: var(--color-green-rgb);
            }
        `;
    contentEl.addClass("level-up-modal");
    contentEl.createEl("h2", { text: "Level Up Character" });
    if (this.plugin.characters.length === 0) {
      const emptyState = contentEl.createDiv();
      emptyState.style.textAlign = "center";
      emptyState.style.padding = "40px 20px";
      emptyState.style.color = "var(--text-muted)";
      emptyState.createEl("div", { text: "\u{1F4C8}", attr: { style: "font-size: 48px; margin-bottom: 16px;" } });
      emptyState.createEl("h3", { text: "No characters found" });
      emptyState.createEl("p", { text: "Create a D&D character first to use the level up system!" });
      return;
    }
    const characterSection = contentEl.createDiv();
    characterSection.createEl("h3", { text: "Select Character" });
    characterSection.createEl("label", { text: "Choose character to level up:" });
    const characterDropdown = new import_obsidian5.DropdownComponent(characterSection);
    characterDropdown.addOption("", "Choose character...");
    this.plugin.characters.forEach((char) => {
      characterDropdown.addOption(char.name, char.name);
    });
    const levelUpSection = contentEl.createDiv();
    levelUpSection.style.marginTop = "20px";
    levelUpSection.style.display = "none";
    characterDropdown.onChange(async (value) => {
      if (value) {
        this.selectedCharacter = this.plugin.characters.find((char) => char.name === value) || null;
        if (this.selectedCharacter) {
          await this.displayLevelUpOptions(levelUpSection);
          levelUpSection.style.display = "block";
        }
      } else {
        levelUpSection.style.display = "none";
      }
    });
  }
  async displayLevelUpOptions(container) {
    container.empty();
    if (!this.selectedCharacter) return;
    try {
      const content = await this.app.vault.read(this.selectedCharacter.file);
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (!frontmatterMatch) {
        container.createEl("div", {
          text: "\u26A0\uFE0F This character file does not have the required frontmatter for level advancement.",
          attr: { style: "padding: 20px; text-align: center; color: var(--text-error);" }
        });
        return;
      }
      const frontmatter = this.parseSimpleYAML(frontmatterMatch[1]);
      const currentLevel = frontmatter.level || 1;
      const currentXP = frontmatter.experience || 0;
      const nextLevel = currentLevel + 1;
      const xpForNextLevel = this.plugin.getNextLevelExperience(currentLevel);
      const xpNeeded = Math.max(0, xpForNextLevel - currentXP);
      const xpProgress = Math.min(100, currentXP / xpForNextLevel * 100);
      const statusSection = container.createDiv("character-status");
      const isReadyToLevel = xpNeeded === 0 && currentLevel < 20;
      if (isReadyToLevel) {
        statusSection.addClass("ready-to-level");
      }
      statusSection.createDiv("status-header").textContent = `${this.selectedCharacter.name} - Level ${currentLevel}`;
      const statusGrid = statusSection.createDiv("status-grid");
      const currentXPItem = statusGrid.createDiv("status-item");
      currentXPItem.createDiv("status-label").textContent = "Current XP:";
      currentXPItem.createDiv("status-value").textContent = currentXP.toLocaleString();
      if (currentLevel < 20) {
        const nextLevelItem = statusGrid.createDiv("status-item");
        nextLevelItem.createDiv("status-label").textContent = `XP for Level ${nextLevel}:`;
        nextLevelItem.createDiv("status-value").textContent = xpForNextLevel.toLocaleString();
        const xpNeededItem = statusGrid.createDiv("status-item");
        xpNeededItem.createDiv("status-label").textContent = "XP Needed:";
        const xpNeededValue = xpNeededItem.createDiv("status-value");
        xpNeededValue.textContent = xpNeeded.toLocaleString();
        if (xpNeeded === 0) {
          xpNeededValue.style.color = "var(--color-green)";
          xpNeededValue.textContent = "READY TO LEVEL UP!";
        }
        const progressBar = statusSection.createDiv("progress-bar");
        const progressFill = progressBar.createDiv("progress-fill");
        progressFill.style.width = `${xpProgress}%`;
      } else {
        const maxLevelItem = statusGrid.createDiv("status-item");
        maxLevelItem.createDiv("status-label").textContent = "Status:";
        maxLevelItem.createDiv("status-value").textContent = "MAX LEVEL";
      }
      if (currentLevel >= 20) {
        statusSection.createEl("p", {
          text: "\u{1F389} Character is already at maximum level!",
          attr: { style: "text-align: center; font-weight: bold; color: var(--color-orange);" }
        });
        return;
      }
      const xpSection = container.createDiv("xp-section");
      xpSection.createEl("h4", { text: "\u2B50 Award Experience" });
      const xpInputGroup = xpSection.createDiv("xp-input-group");
      const xpInput = new import_obsidian5.TextComponent(xpInputGroup);
      xpInput.inputEl.type = "number";
      xpInput.inputEl.placeholder = "Enter XP to award";
      xpInput.inputEl.min = "0";
      xpInput.inputEl.addClass("xp-input");
      const awardXPButton = xpInputGroup.createEl("button", { text: "Award XP" });
      awardXPButton.onclick = () => this.awardExperience(parseInt(xpInput.getValue()) || 0);
      const quickXPContainer = xpSection.createDiv();
      quickXPContainer.style.marginTop = "10px";
      quickXPContainer.createEl("span", { text: "Quick awards: ", attr: { style: "font-size: 0.9em; color: var(--text-muted);" } });
      [50, 100, 250, 500, 1e3].forEach((amount) => {
        const quickBtn = quickXPContainer.createEl("button", { text: `${amount} XP` });
        quickBtn.style.margin = "0 5px 5px 0";
        quickBtn.style.fontSize = "0.8em";
        quickBtn.onclick = () => this.awardExperience(amount);
      });
      const levelUpSection = container.createDiv("level-up-section");
      levelUpSection.createEl("h4", { text: "\u{1F4C8} Direct Level Up" });
      if (isReadyToLevel) {
        levelUpSection.createEl("p", {
          text: "\u2705 This character has enough XP to level up!",
          attr: { style: "color: var(--color-green); font-weight: bold;" }
        });
      }
      const levelUpButton = levelUpSection.createEl("button", {
        text: `Level Up to ${nextLevel}`,
        cls: isReadyToLevel ? "mod-cta" : ""
      });
      levelUpButton.onclick = () => this.levelUpCharacter();
      const featuresSection = container.createDiv("features-list");
      featuresSection.createEl("h4", { text: `\u{1F3AF} Features Gained at Level ${nextLevel}` });
      const className = frontmatter.class || "Unknown";
      const features = this.getClassFeaturesForLevel(className, nextLevel);
      if (features.length > 0) {
        const featuresList = featuresSection.createEl("ul");
        features.forEach((feature) => {
          featuresList.createEl("li", { text: feature });
        });
      } else {
        featuresSection.createEl("p", { text: "No specific features listed for this level." });
      }
    } catch (error) {
      container.createEl("div", {
        text: "\u274C Error parsing character data. Please check the file format.",
        attr: { style: "padding: 20px; text-align: center; color: var(--text-error);" }
      });
    }
  }
  parseSimpleYAML(yamlString) {
    const result = {};
    const lines = yamlString.split("\n");
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith("#")) {
        const colonIndex = trimmed.indexOf(":");
        if (colonIndex !== -1) {
          const key = trimmed.substring(0, colonIndex).trim();
          const value = trimmed.substring(colonIndex + 1).trim().replace(/^["']|["']$/g, "");
          if (!isNaN(Number(value))) {
            result[key] = Number(value);
          } else {
            result[key] = value;
          }
        }
      }
    }
    return result;
  }
  getClassFeaturesForLevel(className, level) {
    var _a;
    const features = {
      "Fighter": {
        1: ["Fighting Style", "Second Wind"],
        2: ["Action Surge"],
        3: ["Martial Archetype"],
        4: ["Ability Score Improvement"],
        5: ["Extra Attack"],
        6: ["Ability Score Improvement"],
        7: ["Martial Archetype Feature"],
        8: ["Ability Score Improvement"],
        9: ["Indomitable"],
        10: ["Martial Archetype Feature"],
        11: ["Extra Attack (2)"],
        12: ["Ability Score Improvement"],
        13: ["Indomitable (2)"],
        14: ["Ability Score Improvement"],
        15: ["Martial Archetype Feature"],
        16: ["Ability Score Improvement"],
        17: ["Action Surge (2)", "Indomitable (3)"],
        18: ["Martial Archetype Feature"],
        19: ["Ability Score Improvement"],
        20: ["Extra Attack (3)"]
      },
      "Wizard": {
        1: ["Spellcasting", "Arcane Recovery"],
        2: ["Arcane Tradition"],
        3: ["2nd Level Spells"],
        4: ["Ability Score Improvement"],
        5: ["3rd Level Spells"],
        6: ["Arcane Tradition Feature"],
        7: ["4th Level Spells"],
        8: ["Ability Score Improvement"],
        9: ["5th Level Spells"],
        10: ["Arcane Tradition Feature"],
        11: ["6th Level Spells"],
        12: ["Ability Score Improvement"],
        13: ["7th Level Spells"],
        14: ["Arcane Tradition Feature"],
        15: ["8th Level Spells"],
        16: ["Ability Score Improvement"],
        17: ["9th Level Spells"],
        18: ["Spell Mastery"],
        19: ["Ability Score Improvement"],
        20: ["Signature Spells"]
      },
      "Barbarian": {
        1: ["Rage", "Unarmored Defense"],
        2: ["Reckless Attack", "Danger Sense"],
        3: ["Primal Path"],
        4: ["Ability Score Improvement"],
        5: ["Extra Attack", "Fast Movement"],
        6: ["Path Feature"],
        7: ["Feral Instinct"],
        8: ["Ability Score Improvement"],
        9: ["Brutal Critical"],
        10: ["Path Feature"],
        11: ["Relentless Rage"],
        12: ["Ability Score Improvement"],
        13: ["Brutal Critical (2)"],
        14: ["Path Feature"],
        15: ["Persistent Rage"],
        16: ["Ability Score Improvement"],
        17: ["Brutal Critical (3)"],
        18: ["Indomitable Might"],
        19: ["Ability Score Improvement"],
        20: ["Primal Champion"]
      }
    };
    return ((_a = features[className]) == null ? void 0 : _a[level]) || [`Level ${level} features (see class description)`];
  }
  async awardExperience(xp) {
    if (!this.selectedCharacter || xp <= 0) {
      new import_obsidian5.Notice("Please enter a valid XP amount.");
      return;
    }
    try {
      const content = await this.app.vault.read(this.selectedCharacter.file);
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (!frontmatterMatch) return;
      const frontmatter = this.parseSimpleYAML(frontmatterMatch[1]);
      const currentXP = frontmatter.experience || 0;
      const newXP = currentXP + xp;
      const newContent = content.replace(
        /^experience: \d+$/m,
        `experience: ${newXP}`
      );
      await this.app.vault.modify(this.selectedCharacter.file, newContent);
      new import_obsidian5.Notice(`Awarded ${xp} XP to ${this.selectedCharacter.name}!`);
      const currentLevel = frontmatter.level || 1;
      const xpForNextLevel = this.plugin.getNextLevelExperience(currentLevel);
      if (newXP >= xpForNextLevel && currentLevel < 20) {
        new import_obsidian5.Notice(`${this.selectedCharacter.name} is ready to level up!`);
      }
      const levelUpSection = document.querySelector(".level-up-modal");
      if (levelUpSection) {
        await this.displayLevelUpOptions(levelUpSection.querySelector('div[style*="margin-top: 20px"]'));
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error awarding XP: ${error.message}`);
    }
  }
  async levelUpCharacter() {
    var _a, _b;
    if (!this.selectedCharacter) return;
    try {
      const content = await this.app.vault.read(this.selectedCharacter.file);
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (!frontmatterMatch) return;
      const frontmatter = this.parseSimpleYAML(frontmatterMatch[1]);
      const currentLevel = frontmatter.level || 1;
      const newLevel = currentLevel + 1;
      const newXP = this.plugin.getExperienceForLevel(newLevel);
      let newContent = content.replace(
        /^level: \d+$/m,
        `level: ${newLevel}`
      );
      newContent = newContent.replace(
        /^experience: \d+$/m,
        `experience: ${newXP}`
      );
      const className = frontmatter.class || "Fighter";
      const classData = DND_DATA.classes[className];
      if (classData) {
        const conMod = this.plugin.calculateAbilityModifier(((_a = frontmatter.stats) == null ? void 0 : _a.constitution) || 10);
        const hpIncrease = Math.floor(classData.hitDie / 2) + 1 + conMod;
        const currentMaxHP = ((_b = frontmatter.hitPoints) == null ? void 0 : _b.max) || 10;
        const newMaxHP = currentMaxHP + hpIncrease;
        newContent = newContent.replace(
          /^  max: \d+$/m,
          `  max: ${newMaxHP}`
        );
        newContent = newContent.replace(
          /^  current: \d+$/m,
          `  current: ${newMaxHP}`
          // Assume full heal on level up
        );
      }
      await this.app.vault.modify(this.selectedCharacter.file, newContent);
      new import_obsidian5.Notice(`\u{1F389} ${this.selectedCharacter.name} leveled up to ${newLevel}!`);
      const levelUpSection = document.querySelector(".level-up-modal");
      if (levelUpSection) {
        await this.displayLevelUpOptions(levelUpSection.querySelector('div[style*="margin-top: 20px"]'));
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error leveling up character: ${error.message}`);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/character-list-modal.ts
var CharacterListModal = class extends import_obsidian6.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const style = contentEl.createEl("style");
    style.textContent = `
            .character-list-modal {
                max-width: 800px;
                max-height: 80vh;
                overflow-y: auto;
            }
            .button-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 10px;
                margin-bottom: 20px;
            }
            .character-item {
                padding: 12px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                margin-bottom: 8px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: background-color 0.2s;
            }
            .character-item:hover {
                background-color: var(--background-modifier-hover);
            }
            .character-info {
                flex: 1;
                cursor: pointer;
            }
            .character-name {
                font-size: 16px;
                font-weight: bold;
                margin-bottom: 4px;
            }
            .character-meta {
                font-size: 0.9em;
                color: var(--text-muted);
            }
            .character-actions {
                display: flex;
                gap: 8px;
            }
            .action-button {
                padding: 4px 8px;
                font-size: 0.85em;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                background: var(--background-primary);
                cursor: pointer;
                transition: background-color 0.2s;
            }
            .action-button:hover {
                background-color: var(--background-modifier-hover);
            }
            .action-button.danger {
                color: var(--text-error);
                border-color: var(--text-error);
            }
            .action-button.danger:hover {
                background-color: var(--text-error);
                color: var(--text-on-accent);
            }
        `;
    contentEl.addClass("character-list-modal");
    contentEl.createEl("h2", { text: "Character Manager" });
    const buttonContainer = contentEl.createDiv("button-grid");
    const createDnDButton = buttonContainer.createEl("button", { text: "\u2694\uFE0F Create D&D Character", cls: "mod-cta" });
    createDnDButton.onclick = () => {
      this.close();
      new CreateDnDCharacterModal(this.app, this.plugin).open();
    };
    const createBasicButton = buttonContainer.createEl("button", { text: "\u{1F4DD} Create Basic Character" });
    createBasicButton.onclick = () => {
      this.close();
      new CreateCharacterModal(this.app, this.plugin).open();
    };
    const manageEquipmentButton = buttonContainer.createEl("button", { text: "\u2694\uFE0F Equipment Database" });
    manageEquipmentButton.onclick = () => {
      this.close();
      new EquipmentModal(this.app, this.plugin).open();
    };
    const manageSpellsButton = buttonContainer.createEl("button", { text: "\u2728 Spell Database" });
    manageSpellsButton.onclick = () => {
      this.close();
      new SpellModal(this.app, this.plugin).open();
    };
    const levelUpButton = buttonContainer.createEl("button", { text: "\u{1F4C8} Level Up Character" });
    levelUpButton.onclick = () => {
      this.close();
      new LevelUpModal(this.app, this.plugin).open();
    };
    const listSection = contentEl.createDiv();
    listSection.style.marginTop = "30px";
    const listHeader = listSection.createEl("h3", { text: `Your Characters (${this.plugin.characters.length})` });
    listHeader.style.marginBottom = "15px";
    if (this.plugin.characters.length === 0) {
      const emptyState = listSection.createDiv();
      emptyState.style.textAlign = "center";
      emptyState.style.padding = "40px 20px";
      emptyState.style.color = "var(--text-muted)";
      emptyState.createEl("div", { text: "\u{1F3AD}", attr: { style: "font-size: 48px; margin-bottom: 16px;" } });
      emptyState.createEl("h3", { text: "No characters found" });
      emptyState.createEl("p", { text: "Create your first character to get started!" });
    } else {
      const listContainer = listSection.createDiv();
      listContainer.style.maxHeight = "400px";
      listContainer.style.overflowY = "auto";
      for (const character of this.plugin.characters) {
        const characterEl = listContainer.createDiv("character-item");
        const characterInfo = characterEl.createDiv("character-info");
        characterInfo.onclick = async () => {
          await this.app.workspace.getLeaf().openFile(character.file);
          this.close();
        };
        const nameEl = characterInfo.createDiv("character-name");
        nameEl.textContent = character.name;
        const metaEl = characterInfo.createDiv("character-meta");
        const lastModified = new Date(character.lastModified).toLocaleDateString();
        metaEl.textContent = `Modified: ${lastModified}`;
        const actionsEl = characterEl.createDiv("character-actions");
        const editButton = actionsEl.createEl("button", { text: "Edit", cls: "action-button" });
        editButton.onclick = async (e) => {
          e.stopPropagation();
          await this.app.workspace.getLeaf().openFile(character.file);
          this.close();
        };
        const deleteButton = actionsEl.createEl("button", { text: "Delete", cls: "action-button danger" });
        deleteButton.onclick = async (e) => {
          e.stopPropagation();
          if (confirm(`Are you sure you want to delete "${character.name}"?`)) {
            await this.plugin.deleteCharacter(character);
            this.onOpen();
          }
        };
      }
      const refreshContainer = listSection.createDiv();
      refreshContainer.style.marginTop = "20px";
      refreshContainer.style.textAlign = "center";
      const refreshButton = refreshContainer.createEl("button", { text: "\u{1F504} Refresh Character List" });
      refreshButton.onclick = async () => {
        await this.plugin.loadCharacters();
        this.onOpen();
      };
    }
    const footer = contentEl.createDiv();
    footer.style.marginTop = "30px";
    footer.style.padding = "15px";
    footer.style.backgroundColor = "var(--background-secondary)";
    footer.style.borderRadius = "6px";
    footer.style.fontSize = "0.9em";
    footer.createEl("h4", { text: "\u{1F4A1} Tips" });
    const tipsList = footer.createEl("ul");
    tipsList.createEl("li", { text: "Click character names to open them for editing" });
    tipsList.createEl("li", { text: "Use the command palette (Ctrl/Cmd+P) for quick access to all features" });
    tipsList.createEl("li", { text: "D&D characters include full stat blocks and mechanics" });
    tipsList.createEl("li", { text: "Characters are stored as markdown files in your vault" });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// settings-tab.ts
var import_obsidian7 = require("obsidian");
var CharacterManagerSettingTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const style = containerEl.createEl("style");
    style.textContent = `
            .setting-item-description {
                color: var(--text-muted);
                font-size: 0.9em;
                margin-top: 4px;
            }
            .settings-section {
                margin-bottom: 30px;
                padding: 20px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
            }
            .settings-section h3 {
                margin-top: 0;
                margin-bottom: 15px;
                color: var(--text-accent);
                border-bottom: 1px solid var(--background-modifier-border);
                padding-bottom: 8px;
            }
            .feature-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
                margin: 20px 0;
            }
            .feature-card {
                padding: 15px;
                background-color: var(--background-secondary);
                border-radius: 6px;
                border-left: 4px solid var(--interactive-accent);
            }
            .feature-card h4 {
                margin: 0 0 8px 0;
                color: var(--text-accent);
            }
            .feature-card p {
                margin: 0;
                font-size: 0.9em;
                color: var(--text-muted);
            }
            .template-editor {
                font-family: var(--font-monospace);
                font-size: 0.9em;
                line-height: 1.4;
            }
            .help-section {
                background-color: var(--background-secondary);
                padding: 20px;
                border-radius: 8px;
                margin-top: 20px;
            }
            .help-section h4 {
                margin-top: 0;
                color: var(--text-accent);
            }
            .help-section ul {
                margin: 10px 0;
                padding-left: 20px;
            }
            .help-section li {
                margin: 8px 0;
            }
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin: 15px 0;
            }
            .stat-card {
                text-align: center;
                padding: 15px;
                background-color: var(--background-primary);
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
            }
            .stat-number {
                font-size: 2em;
                font-weight: bold;
                color: var(--interactive-accent);
                display: block;
            }
            .stat-label {
                font-size: 0.9em;
                color: var(--text-muted);
                margin-top: 5px;
            }
        `;
    containerEl.createEl("h2", { text: "Character Manager Settings" });
    const basicSection = containerEl.createDiv("settings-section");
    basicSection.createEl("h3", { text: "\u2699\uFE0F Basic Settings" });
    new import_obsidian7.Setting(basicSection).setName("Characters Folder").setDesc("Folder where character files will be stored").addText((text) => text.setPlaceholder("Characters").setValue(this.plugin.settings.charactersFolder).onChange(async (value) => {
      this.plugin.settings.charactersFolder = value || "Characters";
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(basicSection).setName("Use D&D Template by Default").setDesc("Use the D&D 5e character sheet template for new characters").addToggle((toggle) => toggle.setValue(this.plugin.settings.useDnDTemplate).onChange(async (value) => {
      this.plugin.settings.useDnDTemplate = value;
      await this.plugin.saveSettings();
    }));
    const templateSection = containerEl.createDiv("settings-section");
    templateSection.createEl("h3", { text: "\u{1F4DD} Template Settings" });
    new import_obsidian7.Setting(templateSection).setName("Character Template").setDesc("Template used when creating new D&D characters. Supports YAML frontmatter and placeholder variables.").addTextArea((text) => {
      text.setPlaceholder("Enter your template...").setValue(this.plugin.settings.defaultTemplate).onChange(async (value) => {
        this.plugin.settings.defaultTemplate = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.addClass("template-editor");
      text.inputEl.rows = 20;
      text.inputEl.style.width = "100%";
      text.inputEl.style.height = "400px";
    });
    const templateHelp = templateSection.createDiv("help-section");
    templateHelp.createEl("h4", { text: "\u{1F4CB} Available Template Variables" });
    templateHelp.createEl("p", { text: "Use these placeholders in your template. They will be replaced with actual character data:" });
    const variablesList = templateHelp.createEl("div");
    variablesList.style.display = "grid";
    variablesList.style.gridTemplateColumns = "repeat(auto-fit, minmax(200px, 1fr))";
    variablesList.style.gap = "10px";
    variablesList.style.fontSize = "0.85em";
    const variables = [
      "{{name}} - Character name",
      "{{class}} - Character class",
      "{{subclass}} - Character subclass",
      "{{race}} - Character race",
      "{{level}} - Character level",
      "{{strength}} - Strength score",
      "{{dexterity}} - Dexterity score",
      "{{constitution}} - Constitution score",
      "{{intelligence}} - Intelligence score",
      "{{wisdom}} - Wisdom score",
      "{{charisma}} - Charisma score",
      "{{strMod}} - Strength modifier",
      "{{dexMod}} - Dexterity modifier",
      "{{conMod}} - Constitution modifier",
      "{{intMod}} - Intelligence modifier",
      "{{wisMod}} - Wisdom modifier",
      "{{chaMod}} - Charisma modifier",
      "{{maxHP}} - Maximum hit points",
      "{{ac}} - Armor class",
      "{{profBonus}} - Proficiency bonus",
      "{{experience}} - Experience points",
      "{{equipment}} - Equipment list",
      "{{spells}} - Spell list",
      "{{backstory}} - Character backstory"
    ];
    variables.forEach((variable) => {
      const item = variablesList.createEl("div");
      item.style.padding = "4px 8px";
      item.style.backgroundColor = "var(--background-primary)";
      item.style.borderRadius = "4px";
      item.style.fontFamily = "var(--font-monospace)";
      item.textContent = variable;
    });
    const managementSection = containerEl.createDiv("settings-section");
    managementSection.createEl("h3", { text: "\u{1F527} Management Tools" });
    new import_obsidian7.Setting(managementSection).setName("Refresh Character List").setDesc("Reload characters from the characters folder").addButton((button) => button.setButtonText("\u{1F504} Refresh").setTooltip("Scan for new or modified character files").onClick(async () => {
      await this.plugin.loadCharacters();
      new import_obsidian7.Notice(`Character list refreshed! Found ${this.plugin.characters.length} characters.`);
    }));
    new import_obsidian7.Setting(managementSection).setName("Reset Template to Default").setDesc("Restore the character template to the default D&D 5e format").addButton((button) => button.setButtonText("\u{1F504} Reset Template").setWarning().onClick(async () => {
      if (confirm("Are you sure you want to reset the template? This will overwrite your current template.")) {
        const defaultSettings = {
          charactersFolder: "Characters",
          useDnDTemplate: true,
          defaultTemplate: `---
name: "{{name}}"
class: "{{class}}"
subclass: "{{subclass}}"
race: "{{race}}"
level: {{level}}
experience: {{experience}}
stats:
  strength: {{strength}}
  dexterity: {{dexterity}}
  constitution: {{constitution}}
  intelligence: {{intelligence}}
  wisdom: {{wisdom}}
  charisma: {{charisma}}
---

# {{name}}
*Level {{level}} {{race}} {{class}}*

## Character Summary
**Background:** {{background}}  
**Alignment:** {{alignment}}  
**Experience:** {{experience}} XP

## Ability Scores
| Ability | Score | Modifier |
|---------|-------|----------|
| Strength | {{strength}} | {{strMod}} |
| Dexterity | {{dexterity}} | {{dexMod}} |
| Constitution | {{constitution}} | {{conMod}} |
| Intelligence | {{intelligence}} | {{intMod}} |
| Wisdom | {{wisdom}} | {{wisMod}} |
| Charisma | {{charisma}} | {{chaMod}} |

## Equipment
{{equipment}}

## Spells
{{spells}}

## Character Background
{{backstory}}
`
        };
        this.plugin.settings.defaultTemplate = defaultSettings.defaultTemplate;
        await this.plugin.saveSettings();
        this.display();
        new import_obsidian7.Notice("Template reset to default!");
      }
    }));
    const statsSection = containerEl.createDiv("settings-section");
    statsSection.createEl("h3", { text: "\u{1F4CA} Plugin Statistics" });
    const statsGrid = statsSection.createDiv("stats-grid");
    const totalCharacters = statsGrid.createDiv("stat-card");
    totalCharacters.createEl("span", { text: this.plugin.characters.length.toString(), cls: "stat-number" });
    totalCharacters.createEl("div", { text: "Total Characters", cls: "stat-label" });
    const charactersFolder = statsGrid.createDiv("stat-card");
    charactersFolder.createEl("span", { text: this.plugin.settings.charactersFolder, cls: "stat-number" });
    charactersFolder.createEl("div", { text: "Characters Folder", cls: "stat-label" });
    const templateType = statsGrid.createDiv("stat-card");
    templateType.createEl("span", { text: this.plugin.settings.useDnDTemplate ? "D&D 5e" : "Basic", cls: "stat-number" });
    templateType.createEl("div", { text: "Template Type", cls: "stat-label" });
    const featuresSection = containerEl.createDiv("settings-section");
    featuresSection.createEl("h3", { text: "\u{1F3B2} D&D 5e Features Overview" });
    const featureGrid = featuresSection.createDiv("feature-grid");
    const features = [
      {
        title: "\u2694\uFE0F Character Creation",
        description: "Complete D&D 5e character creation with all classes, races, and backgrounds from the 2014 Player's Handbook."
      },
      {
        title: "\u{1F3B2} Ability Scores",
        description: "Multiple generation methods: 4d6 drop lowest, point buy, and standard array with automatic modifier calculation."
      },
      {
        title: "\u{1F4C8} Level Advancement",
        description: "Experience tracking, automatic level-up features, hit point progression, and class feature notifications."
      },
      {
        title: "\u2694\uFE0F Equipment Database",
        description: "Comprehensive weapon, armor, and adventuring gear database with stats, costs, and properties."
      },
      {
        title: "\u2728 Spell System",
        description: "Spell database with cantrips and 1st level spells, automatic spell slot calculation, and class filtering."
      },
      {
        title: "\u{1F4CA} Calculations",
        description: "Automatic spell save DC, attack bonuses, proficiency bonus, saving throws, and combat statistics."
      },
      {
        title: "\u{1F4CB} YAML Frontmatter",
        description: "Structured data storage for easy automation, plugin integration, and advanced character management."
      },
      {
        title: "\u{1F527} Extensible System",
        description: "Modular design ready for additional features like campaigns, monsters, magic items, and more."
      }
    ];
    features.forEach((feature) => {
      const card = featureGrid.createDiv("feature-card");
      card.createEl("h4", { text: feature.title });
      card.createEl("p", { text: feature.description });
    });
    const helpSection = containerEl.createDiv("help-section");
    helpSection.createEl("h4", { text: "\u{1F4A1} Tips & Commands" });
    const commandsList = helpSection.createEl("ul");
    commandsList.createEl("li", { text: 'Use Ctrl/Cmd+P \u2192 "Create New D&D Character" for full character creation' });
    commandsList.createEl("li", { text: 'Use Ctrl/Cmd+P \u2192 "Level Up Character" to advance existing characters' });
    commandsList.createEl("li", { text: "Click the ribbon icon (\u{1F465}) for quick access to all features" });
    commandsList.createEl("li", { text: "Characters are stored as markdown files with YAML frontmatter" });
    commandsList.createEl("li", { text: "Equipment and spell databases can be accessed via the command palette" });
    commandsList.createEl("li", { text: "Templates support both static text and dynamic placeholders" });
    helpSection.createEl("p", {
      text: "For more comprehensive information on using the Character Manager, check the plugin documentation.",
      attr: { style: "margin-top: 15px; font-style: italic; color: var(--text-muted);" }
    });
    const creditsSection = containerEl.createDiv("help-section");
    creditsSection.createEl("h4", { text: "\u{1F4DD} About Character Manager" });
    creditsSection.createEl("p", { text: "A comprehensive D&D 5e character management system for Obsidian." });
    creditsSection.createEl("p", { text: "Features include character creation, advancement tracking, equipment databases, spell management, and more." });
    creditsSection.createEl("p", {
      text: "Compatible with D&D 5e (2014) rules and designed for seamless integration with your Obsidian vault.",
      attr: { style: "color: var(--text-muted); font-size: 0.9em;" }
    });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  charactersFolder: "Characters",
  useDnDTemplate: true,
  defaultTemplate: `---
name: "{{name}}"
class: "{{class}}"
subclass: "{{subclass}}"
race: "{{race}}"
subrace: "{{subrace}}"
background: "{{background}}"
level: {{level}}
experience: {{experience}}
multiclass: {{multiclass}}
alignment: "{{alignment}}"
stats:
  strength: {{strength}}
  dexterity: {{dexterity}}
  constitution: {{constitution}}
  intelligence: {{intelligence}}
  wisdom: {{wisdom}}
  charisma: {{charisma}}
modifiers:
  strength: {{strMod}}
  dexterity: {{dexMod}}
  constitution: {{conMod}}
  intelligence: {{intMod}}
  wisdom: {{wisMod}}
  charisma: {{chaMod}}
hitPoints:
  max: {{maxHP}}
  current: {{currentHP}}
  temporary: 0
armorClass: {{ac}}
proficiencyBonus: {{profBonus}}
savingThrows: {{savingThrows}}
skills: {{skills}}
languages: {{languages}}
proficiencies: {{proficiencies}}
equipment: {{equipment}}
spells: {{spells}}
spellSlots: {{spellSlots}}
features: {{features}}
backstory: "{{backstory}}"
ideals: "{{ideals}}"
bonds: "{{bonds}}"
flaws: "{{flaws}}"
notes: "{{notes}}"
---

# {{name}}
{{subclassDisplay}}

## Character Summary
**Background:** {{background}}  
**Alignment:** {{alignment}}  
**Armor Class:** {{ac}}  
**Hit Points:** {{maxHP}} ({{currentHP}} current)  
**Speed:** 30 feet  
**Experience:** {{experience}} XP

## Ability Scores
| Ability | Score | Modifier | Saving Throw |
|---------|-------|----------|--------------|
| Strength | {{strength}} | {{strMod}} | {{strSave}} |
| Dexterity | {{dexterity}} | {{dexMod}} | {{dexSave}} |
| Constitution | {{constitution}} | {{conMod}} | {{conSave}} |
| Intelligence | {{intelligence}} | {{intMod}} | {{intSave}} |
| Wisdom | {{wisdom}} | {{wisMod}} | {{wisSave}} |
| Charisma | {{charisma}} | {{chaMod}} | {{chaSave}} |

## Skills & Proficiencies
**Proficiency Bonus:** +{{profBonus}}  
**Skills:** {{skills}}  
**Languages:** {{languages}}  
**Other Proficiencies:** {{proficiencies}}

## Combat Stats
- **Armor Class:** {{ac}}
- **Hit Points:** {{maxHP}} ({{currentHP}} current)
- **Initiative:** {{dexMod}}
- **Spell Save DC:** {{spellSaveDC}}
- **Spell Attack Bonus:** {{spellAttackBonus}}

## Equipment & Inventory
{{equipment}}

## Spells
{{spells}}

### Spell Slots
{{spellSlots}}

## Features & Traits
{{features}}

## Character Background
**Ideals:** {{ideals}}  
**Bonds:** {{bonds}}  
**Flaws:** {{flaws}}  

**Backstory:**  
{{backstory}}

## Notes
{{notes}}

## Character Advancement
### Level {{level}} Features
{{levelFeatures}}

### Next Level ({{nextLevel}})
**XP Needed:** {{xpForNextLevel}}  
**Features Gained:** {{nextLevelFeatures}}
`
};
var CharacterManagerPlugin = class extends import_obsidian8.Plugin {
  constructor() {
    super(...arguments);
    this.characters = [];
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("users", "Character Manager", (evt) => {
      new CharacterListModal(this.app, this).open();
    });
    this.addCommand({
      id: "create-new-dnd-character",
      name: "Create New D&D Character",
      callback: () => {
        new CreateDnDCharacterModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "level-up-character",
      name: "Level Up Character",
      callback: () => {
        new LevelUpModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "manage-equipment",
      name: "Manage Equipment",
      callback: () => {
        new EquipmentModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "manage-spells",
      name: "Manage Spells",
      callback: () => {
        new SpellModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "create-new-character",
      name: "Create New Character (Basic)",
      callback: () => {
        new CreateCharacterModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "open-character-list",
      name: "Open Character List",
      callback: () => {
        new CharacterListModal(this.app, this).open();
      }
    });
    this.addSettingTab(new CharacterManagerSettingTab(this.app, this));
    await this.loadCharacters();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async loadCharacters() {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.charactersFolder);
    if (!folder) {
      await this.app.vault.createFolder(this.settings.charactersFolder);
      return;
    }
    this.characters = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (file.path.startsWith(this.settings.charactersFolder + "/")) {
        this.characters.push({
          name: file.basename,
          file,
          lastModified: file.stat.mtime
        });
      }
    }
    this.characters.sort((a, b) => b.lastModified - a.lastModified);
  }
  calculateAbilityModifier(score) {
    return Math.floor((score - 10) / 2);
  }
  calculateProficiencyBonus(level) {
    return Math.ceil(level / 4) + 1;
  }
  calculateHitPoints(level, hitDie, conModifier) {
    return hitDie + conModifier + (level - 1) * (Math.floor(hitDie / 2) + 1 + conModifier);
  }
  calculateSpellSaveDC(level, spellcastingAbility, abilityModifier) {
    return 8 + this.calculateProficiencyBonus(level) + abilityModifier;
  }
  calculateSpellAttackBonus(level, abilityModifier) {
    return this.calculateProficiencyBonus(level) + abilityModifier;
  }
  getExperienceForLevel(level) {
    return DND_DATA.experienceTable[level] || 0;
  }
  getNextLevelExperience(level) {
    return DND_DATA.experienceTable[level + 1] || DND_DATA.experienceTable[20];
  }
  formatSpellSlots(classData, level) {
    if (!classData.spellcaster || !classData.spellSlots[level]) {
      return "None";
    }
    const slots = classData.spellSlots[level];
    let slotsText = "";
    for (let i = 0; i < slots.length; i++) {
      const spellLevel = i + 1;
      slotsText += `**${spellLevel}${this.getOrdinalSuffix(spellLevel)} Level:** ${slots[i]} slots
`;
    }
    return slotsText.trim();
  }
  getOrdinalSuffix(num) {
    const suffixes = ["th", "st", "nd", "rd"];
    const v = num % 100;
    return suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0];
  }
  formatEquipmentList(equipment) {
    if (!equipment || equipment.length === 0) {
      return "Starting equipment based on class and background";
    }
    let equipmentText = "## Weapons\n";
    const weapons = equipment.filter((item) => DND_DATA.equipment.weapons[item]);
    weapons.forEach((weapon) => {
      const weaponData = DND_DATA.equipment.weapons[weapon];
      equipmentText += `- **${weapon}**: ${weaponData.damage} ${weaponData.damageType} damage
`;
    });
    equipmentText += "\n## Armor\n";
    const armor = equipment.filter((item) => DND_DATA.equipment.armor[item]);
    armor.forEach((armorItem) => {
      const armorData = DND_DATA.equipment.armor[armorItem];
      equipmentText += `- **${armorItem}**: AC ${armorData.ac}
`;
    });
    equipmentText += "\n## Adventuring Gear\n";
    const gear = equipment.filter((item) => DND_DATA.equipment.adventuringGear[item]);
    gear.forEach((gearItem) => {
      equipmentText += `- ${gearItem}
`;
    });
    return equipmentText;
  }
  formatSpellList(spells) {
    if (!spells || spells.length === 0) {
      return "None";
    }
    let spellText = "";
    for (let level = 0; level <= 9; level++) {
      const spellsOfLevel = spells.filter((spell) => {
        return Object.keys(DND_DATA.spells[level] || {}).includes(spell);
      });
      if (spellsOfLevel.length > 0) {
        const levelName = level === 0 ? "Cantrips" : `${level}${this.getOrdinalSuffix(level)} Level`;
        spellText += `
### ${levelName}
`;
        spellsOfLevel.forEach((spell) => {
          const spellData = DND_DATA.spells[level][spell];
          spellText += `- **${spell}** (${spellData.school}): ${spellData.castingTime}, ${spellData.range}
`;
        });
      }
    }
    return spellText || "None";
  }
  async createDnDCharacter(characterData) {
    const fileName = `${this.settings.charactersFolder}/${characterData.name}.md`;
    const modifiers = {
      strength: this.calculateAbilityModifier(characterData.stats.strength),
      dexterity: this.calculateAbilityModifier(characterData.stats.dexterity),
      constitution: this.calculateAbilityModifier(characterData.stats.constitution),
      intelligence: this.calculateAbilityModifier(characterData.stats.intelligence),
      wisdom: this.calculateAbilityModifier(characterData.stats.wisdom),
      charisma: this.calculateAbilityModifier(characterData.stats.charisma)
    };
    const classData = DND_DATA.classes[characterData.class];
    const profBonus = this.calculateProficiencyBonus(characterData.level);
    const maxHP = this.calculateHitPoints(characterData.level, classData.hitDie, modifiers.constitution);
    const ac = 10 + modifiers.dexterity;
    const experience = this.getExperienceForLevel(characterData.level);
    const nextLevelXP = this.getNextLevelExperience(characterData.level);
    let spellSaveDC = 8;
    let spellAttackBonus = 0;
    if (classData.spellcaster) {
      const spellcastingMod = modifiers[classData.spellcastingAbility.toLowerCase()];
      spellSaveDC = this.calculateSpellSaveDC(characterData.level, classData.spellcastingAbility, spellcastingMod);
      spellAttackBonus = this.calculateSpellAttackBonus(characterData.level, spellcastingMod);
    }
    const savingThrows = {};
    Object.keys(modifiers).forEach((ability) => {
      const abilityName = ability.charAt(0).toUpperCase() + ability.slice(1);
      const isProficient = classData.savingThrows.includes(abilityName);
      const bonus = modifiers[ability] + (isProficient ? profBonus : 0);
      savingThrows[ability] = bonus >= 0 ? `+${bonus}` : `${bonus}`;
    });
    const subclassDisplay = characterData.subclass ? `*Level ${characterData.level} ${characterData.race} ${characterData.class} (${characterData.subclass})*` : `*Level ${characterData.level} ${characterData.race} ${characterData.class}*`;
    const templateData = {
      name: characterData.name,
      class: characterData.class,
      subclass: characterData.subclass || "None",
      race: characterData.race,
      subrace: characterData.subrace || "None",
      background: characterData.background,
      level: characterData.level,
      experience,
      multiclass: JSON.stringify(characterData.multiclass),
      alignment: characterData.alignment,
      strength: characterData.stats.strength,
      dexterity: characterData.stats.dexterity,
      constitution: characterData.stats.constitution,
      intelligence: characterData.stats.intelligence,
      wisdom: characterData.stats.wisdom,
      charisma: characterData.stats.charisma,
      strMod: modifiers.strength >= 0 ? `+${modifiers.strength}` : `${modifiers.strength}`,
      dexMod: modifiers.dexterity >= 0 ? `+${modifiers.dexterity}` : `${modifiers.dexterity}`,
      conMod: modifiers.constitution >= 0 ? `+${modifiers.constitution}` : `${modifiers.constitution}`,
      intMod: modifiers.intelligence >= 0 ? `+${modifiers.intelligence}` : `${modifiers.intelligence}`,
      wisMod: modifiers.wisdom >= 0 ? `+${modifiers.wisdom}` : `${modifiers.wisdom}`,
      chaMod: modifiers.charisma >= 0 ? `+${modifiers.charisma}` : `${modifiers.charisma}`,
      strSave: savingThrows.strength,
      dexSave: savingThrows.dexterity,
      conSave: savingThrows.constitution,
      intSave: savingThrows.intelligence,
      wisSave: savingThrows.wisdom,
      chaSave: savingThrows.charisma,
      maxHP,
      currentHP: maxHP,
      ac,
      profBonus,
      savingThrows: classData.savingThrows.join(", "),
      skills: "To be determined",
      languages: "Common",
      proficiencies: "To be determined",
      equipment: this.formatEquipmentList(characterData.selectedEquipment),
      spells: this.formatSpellList(characterData.selectedSpells),
      spellSlots: this.formatSpellSlots(classData, characterData.level),
      spellSaveDC,
      spellAttackBonus: spellAttackBonus >= 0 ? `+${spellAttackBonus}` : `${spellAttackBonus}`,
      features: "Class and racial features",
      backstory: characterData.backstory,
      ideals: characterData.ideals,
      bonds: characterData.bonds,
      flaws: characterData.flaws,
      notes: "Additional character notes",
      subclassDisplay,
      nextLevel: characterData.level + 1,
      xpForNextLevel: nextLevelXP - experience,
      levelFeatures: `Features gained at level ${characterData.level}`,
      nextLevelFeatures: `Features gained at level ${characterData.level + 1}`
    };
    let content = this.settings.defaultTemplate;
    for (const [key, value] of Object.entries(templateData)) {
      const regex = new RegExp(`{{${key}}}`, "g");
      content = content.replace(regex, String(value));
    }
    try {
      const file = await this.app.vault.create(fileName, content);
      await this.loadCharacters();
      await this.app.workspace.getLeaf().openFile(file);
      new import_obsidian8.Notice(`D&D Character "${characterData.name}" created successfully!`);
      return file;
    } catch (error) {
      new import_obsidian8.Notice(`Error creating character: ${error.message}`);
      return null;
    }
  }
  async createCharacter(name) {
    const fileName = `${this.settings.charactersFolder}/${name}.md`;
    const content = `# ${name}

Basic character template for non-D&D characters.`;
    try {
      const file = await this.app.vault.create(fileName, content);
      await this.loadCharacters();
      await this.app.workspace.getLeaf().openFile(file);
      new import_obsidian8.Notice(`Character "${name}" created successfully!`);
      return file;
    } catch (error) {
      new import_obsidian8.Notice(`Error creating character: ${error.message}`);
      return null;
    }
  }
  async deleteCharacter(character) {
    try {
      await this.app.vault.delete(character.file);
      await this.loadCharacters();
      new import_obsidian8.Notice(`Character "${character.name}" deleted.`);
    } catch (error) {
      new import_obsidian8.Notice(`Error deleting character: ${error.message}`);
    }
  }
};
